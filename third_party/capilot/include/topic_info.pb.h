// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: topic_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_topic_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_topic_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_topic_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_topic_5finfo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_topic_5finfo_2eproto;
namespace topic {
class TopicPubInfo;
struct TopicPubInfoDefaultTypeInternal;
extern TopicPubInfoDefaultTypeInternal _TopicPubInfo_default_instance_;
class TopicStatisticsInfo;
struct TopicStatisticsInfoDefaultTypeInternal;
extern TopicStatisticsInfoDefaultTypeInternal _TopicStatisticsInfo_default_instance_;
class TopicSubInfo;
struct TopicSubInfoDefaultTypeInternal;
extern TopicSubInfoDefaultTypeInternal _TopicSubInfo_default_instance_;
}  // namespace topic
PROTOBUF_NAMESPACE_OPEN
template<> ::topic::TopicPubInfo* Arena::CreateMaybeMessage<::topic::TopicPubInfo>(Arena*);
template<> ::topic::TopicStatisticsInfo* Arena::CreateMaybeMessage<::topic::TopicStatisticsInfo>(Arena*);
template<> ::topic::TopicSubInfo* Arena::CreateMaybeMessage<::topic::TopicSubInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace topic {

// ===================================================================

class TopicPubInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:topic.TopicPubInfo) */ {
 public:
  inline TopicPubInfo() : TopicPubInfo(nullptr) {}
  ~TopicPubInfo() override;
  explicit PROTOBUF_CONSTEXPR TopicPubInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TopicPubInfo(const TopicPubInfo& from);
  TopicPubInfo(TopicPubInfo&& from) noexcept
    : TopicPubInfo() {
    *this = ::std::move(from);
  }

  inline TopicPubInfo& operator=(const TopicPubInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopicPubInfo& operator=(TopicPubInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopicPubInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopicPubInfo* internal_default_instance() {
    return reinterpret_cast<const TopicPubInfo*>(
               &_TopicPubInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TopicPubInfo& a, TopicPubInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TopicPubInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopicPubInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TopicPubInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TopicPubInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TopicPubInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TopicPubInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicPubInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "topic.TopicPubInfo";
  }
  protected:
  explicit TopicPubInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicNameFieldNumber = 1,
    kBatchFieldNumber = 2,
    kAveragePeriodFieldNumber = 3,
    kStdVarFieldNumber = 4,
    kMinFieldNumber = 5,
    kMaxFieldNumber = 6,
  };
  // string topicName = 1;
  void clear_topicname();
  const std::string& topicname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_topicname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_topicname();
  PROTOBUF_NODISCARD std::string* release_topicname();
  void set_allocated_topicname(std::string* topicname);
  private:
  const std::string& _internal_topicname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topicname(const std::string& value);
  std::string* _internal_mutable_topicname();
  public:

  // uint64 batch = 2;
  void clear_batch();
  uint64_t batch() const;
  void set_batch(uint64_t value);
  private:
  uint64_t _internal_batch() const;
  void _internal_set_batch(uint64_t value);
  public:

  // float average_period = 3;
  void clear_average_period();
  float average_period() const;
  void set_average_period(float value);
  private:
  float _internal_average_period() const;
  void _internal_set_average_period(float value);
  public:

  // float std_var = 4;
  void clear_std_var();
  float std_var() const;
  void set_std_var(float value);
  private:
  float _internal_std_var() const;
  void _internal_set_std_var(float value);
  public:

  // float min = 5;
  void clear_min();
  float min() const;
  void set_min(float value);
  private:
  float _internal_min() const;
  void _internal_set_min(float value);
  public:

  // float max = 6;
  void clear_max();
  float max() const;
  void set_max(float value);
  private:
  float _internal_max() const;
  void _internal_set_max(float value);
  public:

  // @@protoc_insertion_point(class_scope:topic.TopicPubInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topicname_;
  uint64_t batch_;
  float average_period_;
  float std_var_;
  float min_;
  float max_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_topic_5finfo_2eproto;
};
// -------------------------------------------------------------------

class TopicSubInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:topic.TopicSubInfo) */ {
 public:
  inline TopicSubInfo() : TopicSubInfo(nullptr) {}
  ~TopicSubInfo() override;
  explicit PROTOBUF_CONSTEXPR TopicSubInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TopicSubInfo(const TopicSubInfo& from);
  TopicSubInfo(TopicSubInfo&& from) noexcept
    : TopicSubInfo() {
    *this = ::std::move(from);
  }

  inline TopicSubInfo& operator=(const TopicSubInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopicSubInfo& operator=(TopicSubInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopicSubInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopicSubInfo* internal_default_instance() {
    return reinterpret_cast<const TopicSubInfo*>(
               &_TopicSubInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TopicSubInfo& a, TopicSubInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TopicSubInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopicSubInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TopicSubInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TopicSubInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TopicSubInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TopicSubInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicSubInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "topic.TopicSubInfo";
  }
  protected:
  explicit TopicSubInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicNameFieldNumber = 1,
    kBatchFieldNumber = 2,
    kAverageLatencyFieldNumber = 3,
    kStdVarFieldNumber = 4,
    kMinFieldNumber = 5,
    kMaxFieldNumber = 6,
  };
  // string topicName = 1;
  void clear_topicname();
  const std::string& topicname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_topicname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_topicname();
  PROTOBUF_NODISCARD std::string* release_topicname();
  void set_allocated_topicname(std::string* topicname);
  private:
  const std::string& _internal_topicname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topicname(const std::string& value);
  std::string* _internal_mutable_topicname();
  public:

  // uint64 batch = 2;
  void clear_batch();
  uint64_t batch() const;
  void set_batch(uint64_t value);
  private:
  uint64_t _internal_batch() const;
  void _internal_set_batch(uint64_t value);
  public:

  // float average_latency = 3;
  void clear_average_latency();
  float average_latency() const;
  void set_average_latency(float value);
  private:
  float _internal_average_latency() const;
  void _internal_set_average_latency(float value);
  public:

  // float std_var = 4;
  void clear_std_var();
  float std_var() const;
  void set_std_var(float value);
  private:
  float _internal_std_var() const;
  void _internal_set_std_var(float value);
  public:

  // float min = 5;
  void clear_min();
  float min() const;
  void set_min(float value);
  private:
  float _internal_min() const;
  void _internal_set_min(float value);
  public:

  // float max = 6;
  void clear_max();
  float max() const;
  void set_max(float value);
  private:
  float _internal_max() const;
  void _internal_set_max(float value);
  public:

  // @@protoc_insertion_point(class_scope:topic.TopicSubInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topicname_;
  uint64_t batch_;
  float average_latency_;
  float std_var_;
  float min_;
  float max_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_topic_5finfo_2eproto;
};
// -------------------------------------------------------------------

class TopicStatisticsInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:topic.TopicStatisticsInfo) */ {
 public:
  inline TopicStatisticsInfo() : TopicStatisticsInfo(nullptr) {}
  ~TopicStatisticsInfo() override;
  explicit PROTOBUF_CONSTEXPR TopicStatisticsInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TopicStatisticsInfo(const TopicStatisticsInfo& from);
  TopicStatisticsInfo(TopicStatisticsInfo&& from) noexcept
    : TopicStatisticsInfo() {
    *this = ::std::move(from);
  }

  inline TopicStatisticsInfo& operator=(const TopicStatisticsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopicStatisticsInfo& operator=(TopicStatisticsInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopicStatisticsInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopicStatisticsInfo* internal_default_instance() {
    return reinterpret_cast<const TopicStatisticsInfo*>(
               &_TopicStatisticsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TopicStatisticsInfo& a, TopicStatisticsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TopicStatisticsInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopicStatisticsInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TopicStatisticsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TopicStatisticsInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TopicStatisticsInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TopicStatisticsInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicStatisticsInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "topic.TopicStatisticsInfo";
  }
  protected:
  explicit TopicStatisticsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubInfoFieldNumber = 1,
    kSubInfoFieldNumber = 2,
  };
  // .topic.TopicPubInfo pubInfo = 1;
  bool has_pubinfo() const;
  private:
  bool _internal_has_pubinfo() const;
  public:
  void clear_pubinfo();
  const ::topic::TopicPubInfo& pubinfo() const;
  PROTOBUF_NODISCARD ::topic::TopicPubInfo* release_pubinfo();
  ::topic::TopicPubInfo* mutable_pubinfo();
  void set_allocated_pubinfo(::topic::TopicPubInfo* pubinfo);
  private:
  const ::topic::TopicPubInfo& _internal_pubinfo() const;
  ::topic::TopicPubInfo* _internal_mutable_pubinfo();
  public:
  void unsafe_arena_set_allocated_pubinfo(
      ::topic::TopicPubInfo* pubinfo);
  ::topic::TopicPubInfo* unsafe_arena_release_pubinfo();

  // .topic.TopicSubInfo subInfo = 2;
  bool has_subinfo() const;
  private:
  bool _internal_has_subinfo() const;
  public:
  void clear_subinfo();
  const ::topic::TopicSubInfo& subinfo() const;
  PROTOBUF_NODISCARD ::topic::TopicSubInfo* release_subinfo();
  ::topic::TopicSubInfo* mutable_subinfo();
  void set_allocated_subinfo(::topic::TopicSubInfo* subinfo);
  private:
  const ::topic::TopicSubInfo& _internal_subinfo() const;
  ::topic::TopicSubInfo* _internal_mutable_subinfo();
  public:
  void unsafe_arena_set_allocated_subinfo(
      ::topic::TopicSubInfo* subinfo);
  ::topic::TopicSubInfo* unsafe_arena_release_subinfo();

  // @@protoc_insertion_point(class_scope:topic.TopicStatisticsInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::topic::TopicPubInfo* pubinfo_;
  ::topic::TopicSubInfo* subinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_topic_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TopicPubInfo

// string topicName = 1;
inline void TopicPubInfo::clear_topicname() {
  topicname_.ClearToEmpty();
}
inline const std::string& TopicPubInfo::topicname() const {
  // @@protoc_insertion_point(field_get:topic.TopicPubInfo.topicName)
  return _internal_topicname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicPubInfo::set_topicname(ArgT0&& arg0, ArgT... args) {
 
 topicname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:topic.TopicPubInfo.topicName)
}
inline std::string* TopicPubInfo::mutable_topicname() {
  std::string* _s = _internal_mutable_topicname();
  // @@protoc_insertion_point(field_mutable:topic.TopicPubInfo.topicName)
  return _s;
}
inline const std::string& TopicPubInfo::_internal_topicname() const {
  return topicname_.Get();
}
inline void TopicPubInfo::_internal_set_topicname(const std::string& value) {
  
  topicname_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicPubInfo::_internal_mutable_topicname() {
  
  return topicname_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicPubInfo::release_topicname() {
  // @@protoc_insertion_point(field_release:topic.TopicPubInfo.topicName)
  return topicname_.Release();
}
inline void TopicPubInfo::set_allocated_topicname(std::string* topicname) {
  if (topicname != nullptr) {
    
  } else {
    
  }
  topicname_.SetAllocated(topicname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (topicname_.IsDefault()) {
    topicname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:topic.TopicPubInfo.topicName)
}

// uint64 batch = 2;
inline void TopicPubInfo::clear_batch() {
  batch_ = uint64_t{0u};
}
inline uint64_t TopicPubInfo::_internal_batch() const {
  return batch_;
}
inline uint64_t TopicPubInfo::batch() const {
  // @@protoc_insertion_point(field_get:topic.TopicPubInfo.batch)
  return _internal_batch();
}
inline void TopicPubInfo::_internal_set_batch(uint64_t value) {
  
  batch_ = value;
}
inline void TopicPubInfo::set_batch(uint64_t value) {
  _internal_set_batch(value);
  // @@protoc_insertion_point(field_set:topic.TopicPubInfo.batch)
}

// float average_period = 3;
inline void TopicPubInfo::clear_average_period() {
  average_period_ = 0;
}
inline float TopicPubInfo::_internal_average_period() const {
  return average_period_;
}
inline float TopicPubInfo::average_period() const {
  // @@protoc_insertion_point(field_get:topic.TopicPubInfo.average_period)
  return _internal_average_period();
}
inline void TopicPubInfo::_internal_set_average_period(float value) {
  
  average_period_ = value;
}
inline void TopicPubInfo::set_average_period(float value) {
  _internal_set_average_period(value);
  // @@protoc_insertion_point(field_set:topic.TopicPubInfo.average_period)
}

// float std_var = 4;
inline void TopicPubInfo::clear_std_var() {
  std_var_ = 0;
}
inline float TopicPubInfo::_internal_std_var() const {
  return std_var_;
}
inline float TopicPubInfo::std_var() const {
  // @@protoc_insertion_point(field_get:topic.TopicPubInfo.std_var)
  return _internal_std_var();
}
inline void TopicPubInfo::_internal_set_std_var(float value) {
  
  std_var_ = value;
}
inline void TopicPubInfo::set_std_var(float value) {
  _internal_set_std_var(value);
  // @@protoc_insertion_point(field_set:topic.TopicPubInfo.std_var)
}

// float min = 5;
inline void TopicPubInfo::clear_min() {
  min_ = 0;
}
inline float TopicPubInfo::_internal_min() const {
  return min_;
}
inline float TopicPubInfo::min() const {
  // @@protoc_insertion_point(field_get:topic.TopicPubInfo.min)
  return _internal_min();
}
inline void TopicPubInfo::_internal_set_min(float value) {
  
  min_ = value;
}
inline void TopicPubInfo::set_min(float value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:topic.TopicPubInfo.min)
}

// float max = 6;
inline void TopicPubInfo::clear_max() {
  max_ = 0;
}
inline float TopicPubInfo::_internal_max() const {
  return max_;
}
inline float TopicPubInfo::max() const {
  // @@protoc_insertion_point(field_get:topic.TopicPubInfo.max)
  return _internal_max();
}
inline void TopicPubInfo::_internal_set_max(float value) {
  
  max_ = value;
}
inline void TopicPubInfo::set_max(float value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:topic.TopicPubInfo.max)
}

// -------------------------------------------------------------------

// TopicSubInfo

// string topicName = 1;
inline void TopicSubInfo::clear_topicname() {
  topicname_.ClearToEmpty();
}
inline const std::string& TopicSubInfo::topicname() const {
  // @@protoc_insertion_point(field_get:topic.TopicSubInfo.topicName)
  return _internal_topicname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicSubInfo::set_topicname(ArgT0&& arg0, ArgT... args) {
 
 topicname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:topic.TopicSubInfo.topicName)
}
inline std::string* TopicSubInfo::mutable_topicname() {
  std::string* _s = _internal_mutable_topicname();
  // @@protoc_insertion_point(field_mutable:topic.TopicSubInfo.topicName)
  return _s;
}
inline const std::string& TopicSubInfo::_internal_topicname() const {
  return topicname_.Get();
}
inline void TopicSubInfo::_internal_set_topicname(const std::string& value) {
  
  topicname_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicSubInfo::_internal_mutable_topicname() {
  
  return topicname_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicSubInfo::release_topicname() {
  // @@protoc_insertion_point(field_release:topic.TopicSubInfo.topicName)
  return topicname_.Release();
}
inline void TopicSubInfo::set_allocated_topicname(std::string* topicname) {
  if (topicname != nullptr) {
    
  } else {
    
  }
  topicname_.SetAllocated(topicname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (topicname_.IsDefault()) {
    topicname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:topic.TopicSubInfo.topicName)
}

// uint64 batch = 2;
inline void TopicSubInfo::clear_batch() {
  batch_ = uint64_t{0u};
}
inline uint64_t TopicSubInfo::_internal_batch() const {
  return batch_;
}
inline uint64_t TopicSubInfo::batch() const {
  // @@protoc_insertion_point(field_get:topic.TopicSubInfo.batch)
  return _internal_batch();
}
inline void TopicSubInfo::_internal_set_batch(uint64_t value) {
  
  batch_ = value;
}
inline void TopicSubInfo::set_batch(uint64_t value) {
  _internal_set_batch(value);
  // @@protoc_insertion_point(field_set:topic.TopicSubInfo.batch)
}

// float average_latency = 3;
inline void TopicSubInfo::clear_average_latency() {
  average_latency_ = 0;
}
inline float TopicSubInfo::_internal_average_latency() const {
  return average_latency_;
}
inline float TopicSubInfo::average_latency() const {
  // @@protoc_insertion_point(field_get:topic.TopicSubInfo.average_latency)
  return _internal_average_latency();
}
inline void TopicSubInfo::_internal_set_average_latency(float value) {
  
  average_latency_ = value;
}
inline void TopicSubInfo::set_average_latency(float value) {
  _internal_set_average_latency(value);
  // @@protoc_insertion_point(field_set:topic.TopicSubInfo.average_latency)
}

// float std_var = 4;
inline void TopicSubInfo::clear_std_var() {
  std_var_ = 0;
}
inline float TopicSubInfo::_internal_std_var() const {
  return std_var_;
}
inline float TopicSubInfo::std_var() const {
  // @@protoc_insertion_point(field_get:topic.TopicSubInfo.std_var)
  return _internal_std_var();
}
inline void TopicSubInfo::_internal_set_std_var(float value) {
  
  std_var_ = value;
}
inline void TopicSubInfo::set_std_var(float value) {
  _internal_set_std_var(value);
  // @@protoc_insertion_point(field_set:topic.TopicSubInfo.std_var)
}

// float min = 5;
inline void TopicSubInfo::clear_min() {
  min_ = 0;
}
inline float TopicSubInfo::_internal_min() const {
  return min_;
}
inline float TopicSubInfo::min() const {
  // @@protoc_insertion_point(field_get:topic.TopicSubInfo.min)
  return _internal_min();
}
inline void TopicSubInfo::_internal_set_min(float value) {
  
  min_ = value;
}
inline void TopicSubInfo::set_min(float value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:topic.TopicSubInfo.min)
}

// float max = 6;
inline void TopicSubInfo::clear_max() {
  max_ = 0;
}
inline float TopicSubInfo::_internal_max() const {
  return max_;
}
inline float TopicSubInfo::max() const {
  // @@protoc_insertion_point(field_get:topic.TopicSubInfo.max)
  return _internal_max();
}
inline void TopicSubInfo::_internal_set_max(float value) {
  
  max_ = value;
}
inline void TopicSubInfo::set_max(float value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:topic.TopicSubInfo.max)
}

// -------------------------------------------------------------------

// TopicStatisticsInfo

// .topic.TopicPubInfo pubInfo = 1;
inline bool TopicStatisticsInfo::_internal_has_pubinfo() const {
  return this != internal_default_instance() && pubinfo_ != nullptr;
}
inline bool TopicStatisticsInfo::has_pubinfo() const {
  return _internal_has_pubinfo();
}
inline void TopicStatisticsInfo::clear_pubinfo() {
  if (GetArenaForAllocation() == nullptr && pubinfo_ != nullptr) {
    delete pubinfo_;
  }
  pubinfo_ = nullptr;
}
inline const ::topic::TopicPubInfo& TopicStatisticsInfo::_internal_pubinfo() const {
  const ::topic::TopicPubInfo* p = pubinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::topic::TopicPubInfo&>(
      ::topic::_TopicPubInfo_default_instance_);
}
inline const ::topic::TopicPubInfo& TopicStatisticsInfo::pubinfo() const {
  // @@protoc_insertion_point(field_get:topic.TopicStatisticsInfo.pubInfo)
  return _internal_pubinfo();
}
inline void TopicStatisticsInfo::unsafe_arena_set_allocated_pubinfo(
    ::topic::TopicPubInfo* pubinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pubinfo_);
  }
  pubinfo_ = pubinfo;
  if (pubinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:topic.TopicStatisticsInfo.pubInfo)
}
inline ::topic::TopicPubInfo* TopicStatisticsInfo::release_pubinfo() {
  
  ::topic::TopicPubInfo* temp = pubinfo_;
  pubinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::topic::TopicPubInfo* TopicStatisticsInfo::unsafe_arena_release_pubinfo() {
  // @@protoc_insertion_point(field_release:topic.TopicStatisticsInfo.pubInfo)
  
  ::topic::TopicPubInfo* temp = pubinfo_;
  pubinfo_ = nullptr;
  return temp;
}
inline ::topic::TopicPubInfo* TopicStatisticsInfo::_internal_mutable_pubinfo() {
  
  if (pubinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::topic::TopicPubInfo>(GetArenaForAllocation());
    pubinfo_ = p;
  }
  return pubinfo_;
}
inline ::topic::TopicPubInfo* TopicStatisticsInfo::mutable_pubinfo() {
  ::topic::TopicPubInfo* _msg = _internal_mutable_pubinfo();
  // @@protoc_insertion_point(field_mutable:topic.TopicStatisticsInfo.pubInfo)
  return _msg;
}
inline void TopicStatisticsInfo::set_allocated_pubinfo(::topic::TopicPubInfo* pubinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pubinfo_;
  }
  if (pubinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pubinfo);
    if (message_arena != submessage_arena) {
      pubinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pubinfo, submessage_arena);
    }
    
  } else {
    
  }
  pubinfo_ = pubinfo;
  // @@protoc_insertion_point(field_set_allocated:topic.TopicStatisticsInfo.pubInfo)
}

// .topic.TopicSubInfo subInfo = 2;
inline bool TopicStatisticsInfo::_internal_has_subinfo() const {
  return this != internal_default_instance() && subinfo_ != nullptr;
}
inline bool TopicStatisticsInfo::has_subinfo() const {
  return _internal_has_subinfo();
}
inline void TopicStatisticsInfo::clear_subinfo() {
  if (GetArenaForAllocation() == nullptr && subinfo_ != nullptr) {
    delete subinfo_;
  }
  subinfo_ = nullptr;
}
inline const ::topic::TopicSubInfo& TopicStatisticsInfo::_internal_subinfo() const {
  const ::topic::TopicSubInfo* p = subinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::topic::TopicSubInfo&>(
      ::topic::_TopicSubInfo_default_instance_);
}
inline const ::topic::TopicSubInfo& TopicStatisticsInfo::subinfo() const {
  // @@protoc_insertion_point(field_get:topic.TopicStatisticsInfo.subInfo)
  return _internal_subinfo();
}
inline void TopicStatisticsInfo::unsafe_arena_set_allocated_subinfo(
    ::topic::TopicSubInfo* subinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subinfo_);
  }
  subinfo_ = subinfo;
  if (subinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:topic.TopicStatisticsInfo.subInfo)
}
inline ::topic::TopicSubInfo* TopicStatisticsInfo::release_subinfo() {
  
  ::topic::TopicSubInfo* temp = subinfo_;
  subinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::topic::TopicSubInfo* TopicStatisticsInfo::unsafe_arena_release_subinfo() {
  // @@protoc_insertion_point(field_release:topic.TopicStatisticsInfo.subInfo)
  
  ::topic::TopicSubInfo* temp = subinfo_;
  subinfo_ = nullptr;
  return temp;
}
inline ::topic::TopicSubInfo* TopicStatisticsInfo::_internal_mutable_subinfo() {
  
  if (subinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::topic::TopicSubInfo>(GetArenaForAllocation());
    subinfo_ = p;
  }
  return subinfo_;
}
inline ::topic::TopicSubInfo* TopicStatisticsInfo::mutable_subinfo() {
  ::topic::TopicSubInfo* _msg = _internal_mutable_subinfo();
  // @@protoc_insertion_point(field_mutable:topic.TopicStatisticsInfo.subInfo)
  return _msg;
}
inline void TopicStatisticsInfo::set_allocated_subinfo(::topic::TopicSubInfo* subinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete subinfo_;
  }
  if (subinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subinfo);
    if (message_arena != submessage_arena) {
      subinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subinfo, submessage_arena);
    }
    
  } else {
    
  }
  subinfo_ = subinfo;
  // @@protoc_insertion_point(field_set_allocated:topic.TopicStatisticsInfo.subInfo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace topic

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_topic_5finfo_2eproto
