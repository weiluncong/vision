// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kmonitor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kmonitor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kmonitor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kmonitor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kmonitor_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kmonitor_2eproto;
class EventCallbackMonitorMessage;
struct EventCallbackMonitorMessageDefaultTypeInternal;
extern EventCallbackMonitorMessageDefaultTypeInternal _EventCallbackMonitorMessage_default_instance_;
class EventFuncInfo;
struct EventFuncInfoDefaultTypeInternal;
extern EventFuncInfoDefaultTypeInternal _EventFuncInfo_default_instance_;
class NodeMonitorMessage;
struct NodeMonitorMessageDefaultTypeInternal;
extern NodeMonitorMessageDefaultTypeInternal _NodeMonitorMessage_default_instance_;
class NodeMonitorMessage_EventInfosEntry_DoNotUse;
struct NodeMonitorMessage_EventInfosEntry_DoNotUseDefaultTypeInternal;
extern NodeMonitorMessage_EventInfosEntry_DoNotUseDefaultTypeInternal _NodeMonitorMessage_EventInfosEntry_DoNotUse_default_instance_;
class NodeMonitorMessage_TimerInfosEntry_DoNotUse;
struct NodeMonitorMessage_TimerInfosEntry_DoNotUseDefaultTypeInternal;
extern NodeMonitorMessage_TimerInfosEntry_DoNotUseDefaultTypeInternal _NodeMonitorMessage_TimerInfosEntry_DoNotUse_default_instance_;
class NodeMonitorMessage_TopicInfosEntry_DoNotUse;
struct NodeMonitorMessage_TopicInfosEntry_DoNotUseDefaultTypeInternal;
extern NodeMonitorMessage_TopicInfosEntry_DoNotUseDefaultTypeInternal _NodeMonitorMessage_TopicInfosEntry_DoNotUse_default_instance_;
class ProcessStatus;
struct ProcessStatusDefaultTypeInternal;
extern ProcessStatusDefaultTypeInternal _ProcessStatus_default_instance_;
class PubInfo;
struct PubInfoDefaultTypeInternal;
extern PubInfoDefaultTypeInternal _PubInfo_default_instance_;
class SubInfo;
struct SubInfoDefaultTypeInternal;
extern SubInfoDefaultTypeInternal _SubInfo_default_instance_;
class SystemInfo;
struct SystemInfoDefaultTypeInternal;
extern SystemInfoDefaultTypeInternal _SystemInfo_default_instance_;
class TimerCallbackMonitorMessage;
struct TimerCallbackMonitorMessageDefaultTypeInternal;
extern TimerCallbackMonitorMessageDefaultTypeInternal _TimerCallbackMonitorMessage_default_instance_;
class TimerFuncInfo;
struct TimerFuncInfoDefaultTypeInternal;
extern TimerFuncInfoDefaultTypeInternal _TimerFuncInfo_default_instance_;
class TopicMonitorMessage;
struct TopicMonitorMessageDefaultTypeInternal;
extern TopicMonitorMessageDefaultTypeInternal _TopicMonitorMessage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::EventCallbackMonitorMessage* Arena::CreateMaybeMessage<::EventCallbackMonitorMessage>(Arena*);
template<> ::EventFuncInfo* Arena::CreateMaybeMessage<::EventFuncInfo>(Arena*);
template<> ::NodeMonitorMessage* Arena::CreateMaybeMessage<::NodeMonitorMessage>(Arena*);
template<> ::NodeMonitorMessage_EventInfosEntry_DoNotUse* Arena::CreateMaybeMessage<::NodeMonitorMessage_EventInfosEntry_DoNotUse>(Arena*);
template<> ::NodeMonitorMessage_TimerInfosEntry_DoNotUse* Arena::CreateMaybeMessage<::NodeMonitorMessage_TimerInfosEntry_DoNotUse>(Arena*);
template<> ::NodeMonitorMessage_TopicInfosEntry_DoNotUse* Arena::CreateMaybeMessage<::NodeMonitorMessage_TopicInfosEntry_DoNotUse>(Arena*);
template<> ::ProcessStatus* Arena::CreateMaybeMessage<::ProcessStatus>(Arena*);
template<> ::PubInfo* Arena::CreateMaybeMessage<::PubInfo>(Arena*);
template<> ::SubInfo* Arena::CreateMaybeMessage<::SubInfo>(Arena*);
template<> ::SystemInfo* Arena::CreateMaybeMessage<::SystemInfo>(Arena*);
template<> ::TimerCallbackMonitorMessage* Arena::CreateMaybeMessage<::TimerCallbackMonitorMessage>(Arena*);
template<> ::TimerFuncInfo* Arena::CreateMaybeMessage<::TimerFuncInfo>(Arena*);
template<> ::TopicMonitorMessage* Arena::CreateMaybeMessage<::TopicMonitorMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ProcessStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProcessStatus) */ {
 public:
  inline ProcessStatus() : ProcessStatus(nullptr) {}
  ~ProcessStatus() override;
  explicit PROTOBUF_CONSTEXPR ProcessStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessStatus(const ProcessStatus& from);
  ProcessStatus(ProcessStatus&& from) noexcept
    : ProcessStatus() {
    *this = ::std::move(from);
  }

  inline ProcessStatus& operator=(const ProcessStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessStatus& operator=(ProcessStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessStatus* internal_default_instance() {
    return reinterpret_cast<const ProcessStatus*>(
               &_ProcessStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProcessStatus& a, ProcessStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProcessStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProcessStatus";
  }
  protected:
  explicit ProcessStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStateFieldNumber = 2,
    kPidFieldNumber = 3,
    kPpidFieldNumber = 4,
    kVmPeakFieldNumber = 5,
    kVmSizeFieldNumber = 6,
    kVmLockFieldNumber = 7,
    kVmHwmFieldNumber = 8,
    kVmRssFieldNumber = 9,
    kVmDataFieldNumber = 10,
    kVmStkFieldNumber = 11,
    kVmExeFieldNumber = 12,
    kVmLibFieldNumber = 13,
    kVmPteFieldNumber = 14,
    kVmSwapFieldNumber = 15,
    kThreadsFieldNumber = 16,
    kVoluntaryCtxtSwitchesFieldNumber = 17,
    kNonvoluntaryCtxtSwitchesFieldNumber = 18,
    kCpuPercentFieldNumber = 19,
    kPriorityFieldNumber = 20,
    kNiceFieldNumber = 21,
    kTaskCpuFieldNumber = 22,
    kTrPriorityFieldNumber = 23,
    kPolicyFieldNumber = 24,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string state = 2;
  void clear_state();
  const std::string& state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // int32 pid = 3;
  void clear_pid();
  int32_t pid() const;
  void set_pid(int32_t value);
  private:
  int32_t _internal_pid() const;
  void _internal_set_pid(int32_t value);
  public:

  // int32 ppid = 4;
  void clear_ppid();
  int32_t ppid() const;
  void set_ppid(int32_t value);
  private:
  int32_t _internal_ppid() const;
  void _internal_set_ppid(int32_t value);
  public:

  // int64 vm_peak = 5;
  void clear_vm_peak();
  int64_t vm_peak() const;
  void set_vm_peak(int64_t value);
  private:
  int64_t _internal_vm_peak() const;
  void _internal_set_vm_peak(int64_t value);
  public:

  // int64 vm_size = 6;
  void clear_vm_size();
  int64_t vm_size() const;
  void set_vm_size(int64_t value);
  private:
  int64_t _internal_vm_size() const;
  void _internal_set_vm_size(int64_t value);
  public:

  // int64 vm_lock = 7;
  void clear_vm_lock();
  int64_t vm_lock() const;
  void set_vm_lock(int64_t value);
  private:
  int64_t _internal_vm_lock() const;
  void _internal_set_vm_lock(int64_t value);
  public:

  // int64 vm_hwm = 8;
  void clear_vm_hwm();
  int64_t vm_hwm() const;
  void set_vm_hwm(int64_t value);
  private:
  int64_t _internal_vm_hwm() const;
  void _internal_set_vm_hwm(int64_t value);
  public:

  // int64 vm_rss = 9;
  void clear_vm_rss();
  int64_t vm_rss() const;
  void set_vm_rss(int64_t value);
  private:
  int64_t _internal_vm_rss() const;
  void _internal_set_vm_rss(int64_t value);
  public:

  // int64 vm_data = 10;
  void clear_vm_data();
  int64_t vm_data() const;
  void set_vm_data(int64_t value);
  private:
  int64_t _internal_vm_data() const;
  void _internal_set_vm_data(int64_t value);
  public:

  // int64 vm_stk = 11;
  void clear_vm_stk();
  int64_t vm_stk() const;
  void set_vm_stk(int64_t value);
  private:
  int64_t _internal_vm_stk() const;
  void _internal_set_vm_stk(int64_t value);
  public:

  // int32 vm_exe = 12;
  void clear_vm_exe();
  int32_t vm_exe() const;
  void set_vm_exe(int32_t value);
  private:
  int32_t _internal_vm_exe() const;
  void _internal_set_vm_exe(int32_t value);
  public:

  // int32 vm_lib = 13;
  void clear_vm_lib();
  int32_t vm_lib() const;
  void set_vm_lib(int32_t value);
  private:
  int32_t _internal_vm_lib() const;
  void _internal_set_vm_lib(int32_t value);
  public:

  // int32 vm_pte = 14;
  void clear_vm_pte();
  int32_t vm_pte() const;
  void set_vm_pte(int32_t value);
  private:
  int32_t _internal_vm_pte() const;
  void _internal_set_vm_pte(int32_t value);
  public:

  // int32 vm_swap = 15;
  void clear_vm_swap();
  int32_t vm_swap() const;
  void set_vm_swap(int32_t value);
  private:
  int32_t _internal_vm_swap() const;
  void _internal_set_vm_swap(int32_t value);
  public:

  // int32 threads = 16;
  void clear_threads();
  int32_t threads() const;
  void set_threads(int32_t value);
  private:
  int32_t _internal_threads() const;
  void _internal_set_threads(int32_t value);
  public:

  // int32 voluntary_ctxt_switches = 17;
  void clear_voluntary_ctxt_switches();
  int32_t voluntary_ctxt_switches() const;
  void set_voluntary_ctxt_switches(int32_t value);
  private:
  int32_t _internal_voluntary_ctxt_switches() const;
  void _internal_set_voluntary_ctxt_switches(int32_t value);
  public:

  // int32 nonvoluntary_ctxt_switches = 18;
  void clear_nonvoluntary_ctxt_switches();
  int32_t nonvoluntary_ctxt_switches() const;
  void set_nonvoluntary_ctxt_switches(int32_t value);
  private:
  int32_t _internal_nonvoluntary_ctxt_switches() const;
  void _internal_set_nonvoluntary_ctxt_switches(int32_t value);
  public:

  // float cpu_percent = 19;
  void clear_cpu_percent();
  float cpu_percent() const;
  void set_cpu_percent(float value);
  private:
  float _internal_cpu_percent() const;
  void _internal_set_cpu_percent(float value);
  public:

  // int32 priority = 20;
  void clear_priority();
  int32_t priority() const;
  void set_priority(int32_t value);
  private:
  int32_t _internal_priority() const;
  void _internal_set_priority(int32_t value);
  public:

  // int32 nice = 21;
  void clear_nice();
  int32_t nice() const;
  void set_nice(int32_t value);
  private:
  int32_t _internal_nice() const;
  void _internal_set_nice(int32_t value);
  public:

  // int32 task_cpu = 22;
  void clear_task_cpu();
  int32_t task_cpu() const;
  void set_task_cpu(int32_t value);
  private:
  int32_t _internal_task_cpu() const;
  void _internal_set_task_cpu(int32_t value);
  public:

  // int32 tr_priority = 23;
  void clear_tr_priority();
  int32_t tr_priority() const;
  void set_tr_priority(int32_t value);
  private:
  int32_t _internal_tr_priority() const;
  void _internal_set_tr_priority(int32_t value);
  public:

  // int32 policy = 24;
  void clear_policy();
  int32_t policy() const;
  void set_policy(int32_t value);
  private:
  int32_t _internal_policy() const;
  void _internal_set_policy(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProcessStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  int32_t pid_;
  int32_t ppid_;
  int64_t vm_peak_;
  int64_t vm_size_;
  int64_t vm_lock_;
  int64_t vm_hwm_;
  int64_t vm_rss_;
  int64_t vm_data_;
  int64_t vm_stk_;
  int32_t vm_exe_;
  int32_t vm_lib_;
  int32_t vm_pte_;
  int32_t vm_swap_;
  int32_t threads_;
  int32_t voluntary_ctxt_switches_;
  int32_t nonvoluntary_ctxt_switches_;
  float cpu_percent_;
  int32_t priority_;
  int32_t nice_;
  int32_t task_cpu_;
  int32_t tr_priority_;
  int32_t policy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kmonitor_2eproto;
};
// -------------------------------------------------------------------

class TopicMonitorMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TopicMonitorMessage) */ {
 public:
  inline TopicMonitorMessage() : TopicMonitorMessage(nullptr) {}
  ~TopicMonitorMessage() override;
  explicit PROTOBUF_CONSTEXPR TopicMonitorMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TopicMonitorMessage(const TopicMonitorMessage& from);
  TopicMonitorMessage(TopicMonitorMessage&& from) noexcept
    : TopicMonitorMessage() {
    *this = ::std::move(from);
  }

  inline TopicMonitorMessage& operator=(const TopicMonitorMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopicMonitorMessage& operator=(TopicMonitorMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopicMonitorMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopicMonitorMessage* internal_default_instance() {
    return reinterpret_cast<const TopicMonitorMessage*>(
               &_TopicMonitorMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TopicMonitorMessage& a, TopicMonitorMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TopicMonitorMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopicMonitorMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TopicMonitorMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TopicMonitorMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TopicMonitorMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TopicMonitorMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicMonitorMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TopicMonitorMessage";
  }
  protected:
  explicit TopicMonitorMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPubBatchFieldNumber = 2,
    kPubAvgFieldNumber = 3,
    kPubMinFieldNumber = 4,
    kPubMaxFieldNumber = 5,
    kPubVarFieldNumber = 6,
    kSubBatchFieldNumber = 7,
    kSubAvgFieldNumber = 8,
    kSubMinFieldNumber = 9,
    kSubMaxFieldNumber = 10,
    kSubVarFieldNumber = 11,
    kSubMissBatchFieldNumber = 12,
    kSubDiscardBatchFieldNumber = 13,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 pub_batch = 2;
  void clear_pub_batch();
  uint64_t pub_batch() const;
  void set_pub_batch(uint64_t value);
  private:
  uint64_t _internal_pub_batch() const;
  void _internal_set_pub_batch(uint64_t value);
  public:

  // float pub_avg = 3;
  void clear_pub_avg();
  float pub_avg() const;
  void set_pub_avg(float value);
  private:
  float _internal_pub_avg() const;
  void _internal_set_pub_avg(float value);
  public:

  // float pub_min = 4;
  void clear_pub_min();
  float pub_min() const;
  void set_pub_min(float value);
  private:
  float _internal_pub_min() const;
  void _internal_set_pub_min(float value);
  public:

  // float pub_max = 5;
  void clear_pub_max();
  float pub_max() const;
  void set_pub_max(float value);
  private:
  float _internal_pub_max() const;
  void _internal_set_pub_max(float value);
  public:

  // float pub_var = 6;
  void clear_pub_var();
  float pub_var() const;
  void set_pub_var(float value);
  private:
  float _internal_pub_var() const;
  void _internal_set_pub_var(float value);
  public:

  // uint64 sub_batch = 7;
  void clear_sub_batch();
  uint64_t sub_batch() const;
  void set_sub_batch(uint64_t value);
  private:
  uint64_t _internal_sub_batch() const;
  void _internal_set_sub_batch(uint64_t value);
  public:

  // float sub_avg = 8;
  void clear_sub_avg();
  float sub_avg() const;
  void set_sub_avg(float value);
  private:
  float _internal_sub_avg() const;
  void _internal_set_sub_avg(float value);
  public:

  // float sub_min = 9;
  void clear_sub_min();
  float sub_min() const;
  void set_sub_min(float value);
  private:
  float _internal_sub_min() const;
  void _internal_set_sub_min(float value);
  public:

  // float sub_max = 10;
  void clear_sub_max();
  float sub_max() const;
  void set_sub_max(float value);
  private:
  float _internal_sub_max() const;
  void _internal_set_sub_max(float value);
  public:

  // float sub_var = 11;
  void clear_sub_var();
  float sub_var() const;
  void set_sub_var(float value);
  private:
  float _internal_sub_var() const;
  void _internal_set_sub_var(float value);
  public:

  // uint64 sub_miss_batch = 12;
  void clear_sub_miss_batch();
  uint64_t sub_miss_batch() const;
  void set_sub_miss_batch(uint64_t value);
  private:
  uint64_t _internal_sub_miss_batch() const;
  void _internal_set_sub_miss_batch(uint64_t value);
  public:

  // uint64 sub_discard_batch = 13;
  void clear_sub_discard_batch();
  uint64_t sub_discard_batch() const;
  void set_sub_discard_batch(uint64_t value);
  private:
  uint64_t _internal_sub_discard_batch() const;
  void _internal_set_sub_discard_batch(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TopicMonitorMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint64_t pub_batch_;
  float pub_avg_;
  float pub_min_;
  float pub_max_;
  float pub_var_;
  uint64_t sub_batch_;
  float sub_avg_;
  float sub_min_;
  float sub_max_;
  float sub_var_;
  uint64_t sub_miss_batch_;
  uint64_t sub_discard_batch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kmonitor_2eproto;
};
// -------------------------------------------------------------------

class EventCallbackMonitorMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EventCallbackMonitorMessage) */ {
 public:
  inline EventCallbackMonitorMessage() : EventCallbackMonitorMessage(nullptr) {}
  ~EventCallbackMonitorMessage() override;
  explicit PROTOBUF_CONSTEXPR EventCallbackMonitorMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventCallbackMonitorMessage(const EventCallbackMonitorMessage& from);
  EventCallbackMonitorMessage(EventCallbackMonitorMessage&& from) noexcept
    : EventCallbackMonitorMessage() {
    *this = ::std::move(from);
  }

  inline EventCallbackMonitorMessage& operator=(const EventCallbackMonitorMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventCallbackMonitorMessage& operator=(EventCallbackMonitorMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventCallbackMonitorMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventCallbackMonitorMessage* internal_default_instance() {
    return reinterpret_cast<const EventCallbackMonitorMessage*>(
               &_EventCallbackMonitorMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EventCallbackMonitorMessage& a, EventCallbackMonitorMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(EventCallbackMonitorMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventCallbackMonitorMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventCallbackMonitorMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventCallbackMonitorMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventCallbackMonitorMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EventCallbackMonitorMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventCallbackMonitorMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EventCallbackMonitorMessage";
  }
  protected:
  explicit EventCallbackMonitorMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatencyAvgFieldNumber = 1,
    kLatencyMinFieldNumber = 2,
    kLatencyMaxFieldNumber = 3,
    kLatencyVarFieldNumber = 4,
    kSpendAvgFieldNumber = 5,
    kSpendMinFieldNumber = 6,
    kSpendMaxFieldNumber = 7,
    kSpendVarFieldNumber = 8,
  };
  // float latency_avg = 1;
  void clear_latency_avg();
  float latency_avg() const;
  void set_latency_avg(float value);
  private:
  float _internal_latency_avg() const;
  void _internal_set_latency_avg(float value);
  public:

  // float latency_min = 2;
  void clear_latency_min();
  float latency_min() const;
  void set_latency_min(float value);
  private:
  float _internal_latency_min() const;
  void _internal_set_latency_min(float value);
  public:

  // float latency_max = 3;
  void clear_latency_max();
  float latency_max() const;
  void set_latency_max(float value);
  private:
  float _internal_latency_max() const;
  void _internal_set_latency_max(float value);
  public:

  // float latency_var = 4;
  void clear_latency_var();
  float latency_var() const;
  void set_latency_var(float value);
  private:
  float _internal_latency_var() const;
  void _internal_set_latency_var(float value);
  public:

  // float spend_avg = 5;
  void clear_spend_avg();
  float spend_avg() const;
  void set_spend_avg(float value);
  private:
  float _internal_spend_avg() const;
  void _internal_set_spend_avg(float value);
  public:

  // float spend_min = 6;
  void clear_spend_min();
  float spend_min() const;
  void set_spend_min(float value);
  private:
  float _internal_spend_min() const;
  void _internal_set_spend_min(float value);
  public:

  // float spend_max = 7;
  void clear_spend_max();
  float spend_max() const;
  void set_spend_max(float value);
  private:
  float _internal_spend_max() const;
  void _internal_set_spend_max(float value);
  public:

  // float spend_var = 8;
  void clear_spend_var();
  float spend_var() const;
  void set_spend_var(float value);
  private:
  float _internal_spend_var() const;
  void _internal_set_spend_var(float value);
  public:

  // @@protoc_insertion_point(class_scope:EventCallbackMonitorMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float latency_avg_;
  float latency_min_;
  float latency_max_;
  float latency_var_;
  float spend_avg_;
  float spend_min_;
  float spend_max_;
  float spend_var_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kmonitor_2eproto;
};
// -------------------------------------------------------------------

class TimerCallbackMonitorMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TimerCallbackMonitorMessage) */ {
 public:
  inline TimerCallbackMonitorMessage() : TimerCallbackMonitorMessage(nullptr) {}
  ~TimerCallbackMonitorMessage() override;
  explicit PROTOBUF_CONSTEXPR TimerCallbackMonitorMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimerCallbackMonitorMessage(const TimerCallbackMonitorMessage& from);
  TimerCallbackMonitorMessage(TimerCallbackMonitorMessage&& from) noexcept
    : TimerCallbackMonitorMessage() {
    *this = ::std::move(from);
  }

  inline TimerCallbackMonitorMessage& operator=(const TimerCallbackMonitorMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimerCallbackMonitorMessage& operator=(TimerCallbackMonitorMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimerCallbackMonitorMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimerCallbackMonitorMessage* internal_default_instance() {
    return reinterpret_cast<const TimerCallbackMonitorMessage*>(
               &_TimerCallbackMonitorMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TimerCallbackMonitorMessage& a, TimerCallbackMonitorMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TimerCallbackMonitorMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimerCallbackMonitorMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimerCallbackMonitorMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimerCallbackMonitorMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TimerCallbackMonitorMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TimerCallbackMonitorMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimerCallbackMonitorMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TimerCallbackMonitorMessage";
  }
  protected:
  explicit TimerCallbackMonitorMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSleepAvgFieldNumber = 1,
    kSleepMinFieldNumber = 2,
    kSleepMaxFieldNumber = 3,
    kSleepVarFieldNumber = 4,
  };
  // float sleep_avg = 1;
  void clear_sleep_avg();
  float sleep_avg() const;
  void set_sleep_avg(float value);
  private:
  float _internal_sleep_avg() const;
  void _internal_set_sleep_avg(float value);
  public:

  // float sleep_min = 2;
  void clear_sleep_min();
  float sleep_min() const;
  void set_sleep_min(float value);
  private:
  float _internal_sleep_min() const;
  void _internal_set_sleep_min(float value);
  public:

  // float sleep_max = 3;
  void clear_sleep_max();
  float sleep_max() const;
  void set_sleep_max(float value);
  private:
  float _internal_sleep_max() const;
  void _internal_set_sleep_max(float value);
  public:

  // float sleep_var = 4;
  void clear_sleep_var();
  float sleep_var() const;
  void set_sleep_var(float value);
  private:
  float _internal_sleep_var() const;
  void _internal_set_sleep_var(float value);
  public:

  // @@protoc_insertion_point(class_scope:TimerCallbackMonitorMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float sleep_avg_;
  float sleep_min_;
  float sleep_max_;
  float sleep_var_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kmonitor_2eproto;
};
// -------------------------------------------------------------------

class NodeMonitorMessage_TopicInfosEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NodeMonitorMessage_TopicInfosEntry_DoNotUse, 
    std::string, ::TopicMonitorMessage,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NodeMonitorMessage_TopicInfosEntry_DoNotUse, 
    std::string, ::TopicMonitorMessage,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  NodeMonitorMessage_TopicInfosEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR NodeMonitorMessage_TopicInfosEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit NodeMonitorMessage_TopicInfosEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const NodeMonitorMessage_TopicInfosEntry_DoNotUse& other);
  static const NodeMonitorMessage_TopicInfosEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NodeMonitorMessage_TopicInfosEntry_DoNotUse*>(&_NodeMonitorMessage_TopicInfosEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "NodeMonitorMessage.TopicInfosEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_kmonitor_2eproto;
};

// -------------------------------------------------------------------

class NodeMonitorMessage_EventInfosEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NodeMonitorMessage_EventInfosEntry_DoNotUse, 
    std::string, ::EventCallbackMonitorMessage,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NodeMonitorMessage_EventInfosEntry_DoNotUse, 
    std::string, ::EventCallbackMonitorMessage,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  NodeMonitorMessage_EventInfosEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR NodeMonitorMessage_EventInfosEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit NodeMonitorMessage_EventInfosEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const NodeMonitorMessage_EventInfosEntry_DoNotUse& other);
  static const NodeMonitorMessage_EventInfosEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NodeMonitorMessage_EventInfosEntry_DoNotUse*>(&_NodeMonitorMessage_EventInfosEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "NodeMonitorMessage.EventInfosEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_kmonitor_2eproto;
};

// -------------------------------------------------------------------

class NodeMonitorMessage_TimerInfosEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NodeMonitorMessage_TimerInfosEntry_DoNotUse, 
    int32_t, ::TimerCallbackMonitorMessage,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NodeMonitorMessage_TimerInfosEntry_DoNotUse, 
    int32_t, ::TimerCallbackMonitorMessage,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  NodeMonitorMessage_TimerInfosEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR NodeMonitorMessage_TimerInfosEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit NodeMonitorMessage_TimerInfosEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const NodeMonitorMessage_TimerInfosEntry_DoNotUse& other);
  static const NodeMonitorMessage_TimerInfosEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NodeMonitorMessage_TimerInfosEntry_DoNotUse*>(&_NodeMonitorMessage_TimerInfosEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_kmonitor_2eproto;
};

// -------------------------------------------------------------------

class NodeMonitorMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NodeMonitorMessage) */ {
 public:
  inline NodeMonitorMessage() : NodeMonitorMessage(nullptr) {}
  ~NodeMonitorMessage() override;
  explicit PROTOBUF_CONSTEXPR NodeMonitorMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeMonitorMessage(const NodeMonitorMessage& from);
  NodeMonitorMessage(NodeMonitorMessage&& from) noexcept
    : NodeMonitorMessage() {
    *this = ::std::move(from);
  }

  inline NodeMonitorMessage& operator=(const NodeMonitorMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeMonitorMessage& operator=(NodeMonitorMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeMonitorMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeMonitorMessage* internal_default_instance() {
    return reinterpret_cast<const NodeMonitorMessage*>(
               &_NodeMonitorMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(NodeMonitorMessage& a, NodeMonitorMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeMonitorMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeMonitorMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeMonitorMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NodeMonitorMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NodeMonitorMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NodeMonitorMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeMonitorMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NodeMonitorMessage";
  }
  protected:
  explicit NodeMonitorMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTopicInfosFieldNumber = 2,
    kEventInfosFieldNumber = 3,
    kTimerInfosFieldNumber = 4,
    kProcessStatusFieldNumber = 1,
  };
  // map<string, .TopicMonitorMessage> topic_infos = 2;
  int topic_infos_size() const;
  private:
  int _internal_topic_infos_size() const;
  public:
  void clear_topic_infos();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TopicMonitorMessage >&
      _internal_topic_infos() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TopicMonitorMessage >*
      _internal_mutable_topic_infos();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TopicMonitorMessage >&
      topic_infos() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TopicMonitorMessage >*
      mutable_topic_infos();

  // map<string, .EventCallbackMonitorMessage> event_infos = 3;
  int event_infos_size() const;
  private:
  int _internal_event_infos_size() const;
  public:
  void clear_event_infos();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::EventCallbackMonitorMessage >&
      _internal_event_infos() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::EventCallbackMonitorMessage >*
      _internal_mutable_event_infos();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::EventCallbackMonitorMessage >&
      event_infos() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::EventCallbackMonitorMessage >*
      mutable_event_infos();

  // map<int32, .TimerCallbackMonitorMessage> timer_infos = 4;
  int timer_infos_size() const;
  private:
  int _internal_timer_infos_size() const;
  public:
  void clear_timer_infos();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::TimerCallbackMonitorMessage >&
      _internal_timer_infos() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::TimerCallbackMonitorMessage >*
      _internal_mutable_timer_infos();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::TimerCallbackMonitorMessage >&
      timer_infos() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::TimerCallbackMonitorMessage >*
      mutable_timer_infos();

  // .ProcessStatus process_status = 1;
  bool has_process_status() const;
  private:
  bool _internal_has_process_status() const;
  public:
  void clear_process_status();
  const ::ProcessStatus& process_status() const;
  PROTOBUF_NODISCARD ::ProcessStatus* release_process_status();
  ::ProcessStatus* mutable_process_status();
  void set_allocated_process_status(::ProcessStatus* process_status);
  private:
  const ::ProcessStatus& _internal_process_status() const;
  ::ProcessStatus* _internal_mutable_process_status();
  public:
  void unsafe_arena_set_allocated_process_status(
      ::ProcessStatus* process_status);
  ::ProcessStatus* unsafe_arena_release_process_status();

  // @@protoc_insertion_point(class_scope:NodeMonitorMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      NodeMonitorMessage_TopicInfosEntry_DoNotUse,
      std::string, ::TopicMonitorMessage,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> topic_infos_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      NodeMonitorMessage_EventInfosEntry_DoNotUse,
      std::string, ::EventCallbackMonitorMessage,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> event_infos_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      NodeMonitorMessage_TimerInfosEntry_DoNotUse,
      int32_t, ::TimerCallbackMonitorMessage,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> timer_infos_;
  ::ProcessStatus* process_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kmonitor_2eproto;
};
// -------------------------------------------------------------------

class EventFuncInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EventFuncInfo) */ {
 public:
  inline EventFuncInfo() : EventFuncInfo(nullptr) {}
  ~EventFuncInfo() override;
  explicit PROTOBUF_CONSTEXPR EventFuncInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventFuncInfo(const EventFuncInfo& from);
  EventFuncInfo(EventFuncInfo&& from) noexcept
    : EventFuncInfo() {
    *this = ::std::move(from);
  }

  inline EventFuncInfo& operator=(const EventFuncInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventFuncInfo& operator=(EventFuncInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventFuncInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventFuncInfo* internal_default_instance() {
    return reinterpret_cast<const EventFuncInfo*>(
               &_EventFuncInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(EventFuncInfo& a, EventFuncInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EventFuncInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventFuncInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventFuncInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventFuncInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventFuncInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EventFuncInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventFuncInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EventFuncInfo";
  }
  protected:
  explicit EventFuncInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatencyFieldNumber = 1,
    kSpendFieldNumber = 2,
    kSpendCpuFieldNumber = 3,
  };
  // double latency = 1;
  void clear_latency();
  double latency() const;
  void set_latency(double value);
  private:
  double _internal_latency() const;
  void _internal_set_latency(double value);
  public:

  // double spend = 2;
  void clear_spend();
  double spend() const;
  void set_spend(double value);
  private:
  double _internal_spend() const;
  void _internal_set_spend(double value);
  public:

  // double spend_cpu = 3;
  void clear_spend_cpu();
  double spend_cpu() const;
  void set_spend_cpu(double value);
  private:
  double _internal_spend_cpu() const;
  void _internal_set_spend_cpu(double value);
  public:

  // @@protoc_insertion_point(class_scope:EventFuncInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double latency_;
  double spend_;
  double spend_cpu_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kmonitor_2eproto;
};
// -------------------------------------------------------------------

class TimerFuncInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TimerFuncInfo) */ {
 public:
  inline TimerFuncInfo() : TimerFuncInfo(nullptr) {}
  ~TimerFuncInfo() override;
  explicit PROTOBUF_CONSTEXPR TimerFuncInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimerFuncInfo(const TimerFuncInfo& from);
  TimerFuncInfo(TimerFuncInfo&& from) noexcept
    : TimerFuncInfo() {
    *this = ::std::move(from);
  }

  inline TimerFuncInfo& operator=(const TimerFuncInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimerFuncInfo& operator=(TimerFuncInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimerFuncInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimerFuncInfo* internal_default_instance() {
    return reinterpret_cast<const TimerFuncInfo*>(
               &_TimerFuncInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TimerFuncInfo& a, TimerFuncInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TimerFuncInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimerFuncInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimerFuncInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimerFuncInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TimerFuncInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TimerFuncInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimerFuncInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TimerFuncInfo";
  }
  protected:
  explicit TimerFuncInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpendFieldNumber = 1,
    kSleepFieldNumber = 2,
    kSpendCpuFieldNumber = 3,
  };
  // double spend = 1;
  void clear_spend();
  double spend() const;
  void set_spend(double value);
  private:
  double _internal_spend() const;
  void _internal_set_spend(double value);
  public:

  // double sleep = 2;
  void clear_sleep();
  double sleep() const;
  void set_sleep(double value);
  private:
  double _internal_sleep() const;
  void _internal_set_sleep(double value);
  public:

  // double spend_cpu = 3;
  void clear_spend_cpu();
  double spend_cpu() const;
  void set_spend_cpu(double value);
  private:
  double _internal_spend_cpu() const;
  void _internal_set_spend_cpu(double value);
  public:

  // @@protoc_insertion_point(class_scope:TimerFuncInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double spend_;
  double sleep_;
  double spend_cpu_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kmonitor_2eproto;
};
// -------------------------------------------------------------------

class PubInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PubInfo) */ {
 public:
  inline PubInfo() : PubInfo(nullptr) {}
  ~PubInfo() override;
  explicit PROTOBUF_CONSTEXPR PubInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PubInfo(const PubInfo& from);
  PubInfo(PubInfo&& from) noexcept
    : PubInfo() {
    *this = ::std::move(from);
  }

  inline PubInfo& operator=(const PubInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PubInfo& operator=(PubInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PubInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PubInfo* internal_default_instance() {
    return reinterpret_cast<const PubInfo*>(
               &_PubInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PubInfo& a, PubInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PubInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PubInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PubInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PubInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PubInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PubInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PubInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PubInfo";
  }
  protected:
  explicit PubInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntervalFieldNumber = 1,
    kBatchFieldNumber = 2,
  };
  // double interval = 1;
  void clear_interval();
  double interval() const;
  void set_interval(double value);
  private:
  double _internal_interval() const;
  void _internal_set_interval(double value);
  public:

  // int32 batch = 2;
  void clear_batch();
  int32_t batch() const;
  void set_batch(int32_t value);
  private:
  int32_t _internal_batch() const;
  void _internal_set_batch(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PubInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double interval_;
  int32_t batch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kmonitor_2eproto;
};
// -------------------------------------------------------------------

class SubInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SubInfo) */ {
 public:
  inline SubInfo() : SubInfo(nullptr) {}
  ~SubInfo() override;
  explicit PROTOBUF_CONSTEXPR SubInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubInfo(const SubInfo& from);
  SubInfo(SubInfo&& from) noexcept
    : SubInfo() {
    *this = ::std::move(from);
  }

  inline SubInfo& operator=(const SubInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubInfo& operator=(SubInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubInfo* internal_default_instance() {
    return reinterpret_cast<const SubInfo*>(
               &_SubInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SubInfo& a, SubInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SubInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SubInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SubInfo";
  }
  protected:
  explicit SubInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatencyFieldNumber = 1,
    kBatchFieldNumber = 3,
    kMissBatchFieldNumber = 2,
  };
  // double latency = 1;
  void clear_latency();
  double latency() const;
  void set_latency(double value);
  private:
  double _internal_latency() const;
  void _internal_set_latency(double value);
  public:

  // int64 batch = 3;
  void clear_batch();
  int64_t batch() const;
  void set_batch(int64_t value);
  private:
  int64_t _internal_batch() const;
  void _internal_set_batch(int64_t value);
  public:

  // int32 miss_batch = 2;
  void clear_miss_batch();
  int32_t miss_batch() const;
  void set_miss_batch(int32_t value);
  private:
  int32_t _internal_miss_batch() const;
  void _internal_set_miss_batch(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SubInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double latency_;
  int64_t batch_;
  int32_t miss_batch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kmonitor_2eproto;
};
// -------------------------------------------------------------------

class SystemInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SystemInfo) */ {
 public:
  inline SystemInfo() : SystemInfo(nullptr) {}
  ~SystemInfo() override;
  explicit PROTOBUF_CONSTEXPR SystemInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemInfo(const SystemInfo& from);
  SystemInfo(SystemInfo&& from) noexcept
    : SystemInfo() {
    *this = ::std::move(from);
  }

  inline SystemInfo& operator=(const SystemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemInfo& operator=(SystemInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SystemInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemInfo* internal_default_instance() {
    return reinterpret_cast<const SystemInfo*>(
               &_SystemInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SystemInfo& a, SystemInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SystemInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SystemInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SystemInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SystemInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SystemInfo";
  }
  protected:
  explicit SystemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpuUseFieldNumber = 8,
    kMemTotalFieldNumber = 1,
    kMemFreeFieldNumber = 2,
    kMemAvailableFieldNumber = 3,
    kBuffersFieldNumber = 4,
    kCachedFieldNumber = 5,
    kSwapTotalFieldNumber = 6,
    kSwapFreeFieldNumber = 7,
  };
  // repeated float cpu_use = 8;
  int cpu_use_size() const;
  private:
  int _internal_cpu_use_size() const;
  public:
  void clear_cpu_use();
  private:
  float _internal_cpu_use(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_cpu_use() const;
  void _internal_add_cpu_use(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_cpu_use();
  public:
  float cpu_use(int index) const;
  void set_cpu_use(int index, float value);
  void add_cpu_use(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      cpu_use() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_cpu_use();

  // int32 mem_total = 1;
  void clear_mem_total();
  int32_t mem_total() const;
  void set_mem_total(int32_t value);
  private:
  int32_t _internal_mem_total() const;
  void _internal_set_mem_total(int32_t value);
  public:

  // int32 mem_free = 2;
  void clear_mem_free();
  int32_t mem_free() const;
  void set_mem_free(int32_t value);
  private:
  int32_t _internal_mem_free() const;
  void _internal_set_mem_free(int32_t value);
  public:

  // int32 mem_available = 3;
  void clear_mem_available();
  int32_t mem_available() const;
  void set_mem_available(int32_t value);
  private:
  int32_t _internal_mem_available() const;
  void _internal_set_mem_available(int32_t value);
  public:

  // int32 buffers = 4;
  void clear_buffers();
  int32_t buffers() const;
  void set_buffers(int32_t value);
  private:
  int32_t _internal_buffers() const;
  void _internal_set_buffers(int32_t value);
  public:

  // int32 cached = 5;
  void clear_cached();
  int32_t cached() const;
  void set_cached(int32_t value);
  private:
  int32_t _internal_cached() const;
  void _internal_set_cached(int32_t value);
  public:

  // int32 swap_total = 6;
  void clear_swap_total();
  int32_t swap_total() const;
  void set_swap_total(int32_t value);
  private:
  int32_t _internal_swap_total() const;
  void _internal_set_swap_total(int32_t value);
  public:

  // int32 swap_free = 7;
  void clear_swap_free();
  int32_t swap_free() const;
  void set_swap_free(int32_t value);
  private:
  int32_t _internal_swap_free() const;
  void _internal_set_swap_free(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SystemInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > cpu_use_;
  int32_t mem_total_;
  int32_t mem_free_;
  int32_t mem_available_;
  int32_t buffers_;
  int32_t cached_;
  int32_t swap_total_;
  int32_t swap_free_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kmonitor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProcessStatus

// string name = 1;
inline void ProcessStatus::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ProcessStatus::name() const {
  // @@protoc_insertion_point(field_get:ProcessStatus.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProcessStatus::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProcessStatus.name)
}
inline std::string* ProcessStatus::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ProcessStatus.name)
  return _s;
}
inline const std::string& ProcessStatus::_internal_name() const {
  return name_.Get();
}
inline void ProcessStatus::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessStatus::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* ProcessStatus::release_name() {
  // @@protoc_insertion_point(field_release:ProcessStatus.name)
  return name_.Release();
}
inline void ProcessStatus::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProcessStatus.name)
}

// string state = 2;
inline void ProcessStatus::clear_state() {
  state_.ClearToEmpty();
}
inline const std::string& ProcessStatus::state() const {
  // @@protoc_insertion_point(field_get:ProcessStatus.state)
  return _internal_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProcessStatus::set_state(ArgT0&& arg0, ArgT... args) {
 
 state_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProcessStatus.state)
}
inline std::string* ProcessStatus::mutable_state() {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:ProcessStatus.state)
  return _s;
}
inline const std::string& ProcessStatus::_internal_state() const {
  return state_.Get();
}
inline void ProcessStatus::_internal_set_state(const std::string& value) {
  
  state_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessStatus::_internal_mutable_state() {
  
  return state_.Mutable(GetArenaForAllocation());
}
inline std::string* ProcessStatus::release_state() {
  // @@protoc_insertion_point(field_release:ProcessStatus.state)
  return state_.Release();
}
inline void ProcessStatus::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocated(state, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (state_.IsDefault()) {
    state_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProcessStatus.state)
}

// int32 pid = 3;
inline void ProcessStatus::clear_pid() {
  pid_ = 0;
}
inline int32_t ProcessStatus::_internal_pid() const {
  return pid_;
}
inline int32_t ProcessStatus::pid() const {
  // @@protoc_insertion_point(field_get:ProcessStatus.pid)
  return _internal_pid();
}
inline void ProcessStatus::_internal_set_pid(int32_t value) {
  
  pid_ = value;
}
inline void ProcessStatus::set_pid(int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:ProcessStatus.pid)
}

// int32 ppid = 4;
inline void ProcessStatus::clear_ppid() {
  ppid_ = 0;
}
inline int32_t ProcessStatus::_internal_ppid() const {
  return ppid_;
}
inline int32_t ProcessStatus::ppid() const {
  // @@protoc_insertion_point(field_get:ProcessStatus.ppid)
  return _internal_ppid();
}
inline void ProcessStatus::_internal_set_ppid(int32_t value) {
  
  ppid_ = value;
}
inline void ProcessStatus::set_ppid(int32_t value) {
  _internal_set_ppid(value);
  // @@protoc_insertion_point(field_set:ProcessStatus.ppid)
}

// int64 vm_peak = 5;
inline void ProcessStatus::clear_vm_peak() {
  vm_peak_ = int64_t{0};
}
inline int64_t ProcessStatus::_internal_vm_peak() const {
  return vm_peak_;
}
inline int64_t ProcessStatus::vm_peak() const {
  // @@protoc_insertion_point(field_get:ProcessStatus.vm_peak)
  return _internal_vm_peak();
}
inline void ProcessStatus::_internal_set_vm_peak(int64_t value) {
  
  vm_peak_ = value;
}
inline void ProcessStatus::set_vm_peak(int64_t value) {
  _internal_set_vm_peak(value);
  // @@protoc_insertion_point(field_set:ProcessStatus.vm_peak)
}

// int64 vm_size = 6;
inline void ProcessStatus::clear_vm_size() {
  vm_size_ = int64_t{0};
}
inline int64_t ProcessStatus::_internal_vm_size() const {
  return vm_size_;
}
inline int64_t ProcessStatus::vm_size() const {
  // @@protoc_insertion_point(field_get:ProcessStatus.vm_size)
  return _internal_vm_size();
}
inline void ProcessStatus::_internal_set_vm_size(int64_t value) {
  
  vm_size_ = value;
}
inline void ProcessStatus::set_vm_size(int64_t value) {
  _internal_set_vm_size(value);
  // @@protoc_insertion_point(field_set:ProcessStatus.vm_size)
}

// int64 vm_lock = 7;
inline void ProcessStatus::clear_vm_lock() {
  vm_lock_ = int64_t{0};
}
inline int64_t ProcessStatus::_internal_vm_lock() const {
  return vm_lock_;
}
inline int64_t ProcessStatus::vm_lock() const {
  // @@protoc_insertion_point(field_get:ProcessStatus.vm_lock)
  return _internal_vm_lock();
}
inline void ProcessStatus::_internal_set_vm_lock(int64_t value) {
  
  vm_lock_ = value;
}
inline void ProcessStatus::set_vm_lock(int64_t value) {
  _internal_set_vm_lock(value);
  // @@protoc_insertion_point(field_set:ProcessStatus.vm_lock)
}

// int64 vm_hwm = 8;
inline void ProcessStatus::clear_vm_hwm() {
  vm_hwm_ = int64_t{0};
}
inline int64_t ProcessStatus::_internal_vm_hwm() const {
  return vm_hwm_;
}
inline int64_t ProcessStatus::vm_hwm() const {
  // @@protoc_insertion_point(field_get:ProcessStatus.vm_hwm)
  return _internal_vm_hwm();
}
inline void ProcessStatus::_internal_set_vm_hwm(int64_t value) {
  
  vm_hwm_ = value;
}
inline void ProcessStatus::set_vm_hwm(int64_t value) {
  _internal_set_vm_hwm(value);
  // @@protoc_insertion_point(field_set:ProcessStatus.vm_hwm)
}

// int64 vm_rss = 9;
inline void ProcessStatus::clear_vm_rss() {
  vm_rss_ = int64_t{0};
}
inline int64_t ProcessStatus::_internal_vm_rss() const {
  return vm_rss_;
}
inline int64_t ProcessStatus::vm_rss() const {
  // @@protoc_insertion_point(field_get:ProcessStatus.vm_rss)
  return _internal_vm_rss();
}
inline void ProcessStatus::_internal_set_vm_rss(int64_t value) {
  
  vm_rss_ = value;
}
inline void ProcessStatus::set_vm_rss(int64_t value) {
  _internal_set_vm_rss(value);
  // @@protoc_insertion_point(field_set:ProcessStatus.vm_rss)
}

// int64 vm_data = 10;
inline void ProcessStatus::clear_vm_data() {
  vm_data_ = int64_t{0};
}
inline int64_t ProcessStatus::_internal_vm_data() const {
  return vm_data_;
}
inline int64_t ProcessStatus::vm_data() const {
  // @@protoc_insertion_point(field_get:ProcessStatus.vm_data)
  return _internal_vm_data();
}
inline void ProcessStatus::_internal_set_vm_data(int64_t value) {
  
  vm_data_ = value;
}
inline void ProcessStatus::set_vm_data(int64_t value) {
  _internal_set_vm_data(value);
  // @@protoc_insertion_point(field_set:ProcessStatus.vm_data)
}

// int64 vm_stk = 11;
inline void ProcessStatus::clear_vm_stk() {
  vm_stk_ = int64_t{0};
}
inline int64_t ProcessStatus::_internal_vm_stk() const {
  return vm_stk_;
}
inline int64_t ProcessStatus::vm_stk() const {
  // @@protoc_insertion_point(field_get:ProcessStatus.vm_stk)
  return _internal_vm_stk();
}
inline void ProcessStatus::_internal_set_vm_stk(int64_t value) {
  
  vm_stk_ = value;
}
inline void ProcessStatus::set_vm_stk(int64_t value) {
  _internal_set_vm_stk(value);
  // @@protoc_insertion_point(field_set:ProcessStatus.vm_stk)
}

// int32 vm_exe = 12;
inline void ProcessStatus::clear_vm_exe() {
  vm_exe_ = 0;
}
inline int32_t ProcessStatus::_internal_vm_exe() const {
  return vm_exe_;
}
inline int32_t ProcessStatus::vm_exe() const {
  // @@protoc_insertion_point(field_get:ProcessStatus.vm_exe)
  return _internal_vm_exe();
}
inline void ProcessStatus::_internal_set_vm_exe(int32_t value) {
  
  vm_exe_ = value;
}
inline void ProcessStatus::set_vm_exe(int32_t value) {
  _internal_set_vm_exe(value);
  // @@protoc_insertion_point(field_set:ProcessStatus.vm_exe)
}

// int32 vm_lib = 13;
inline void ProcessStatus::clear_vm_lib() {
  vm_lib_ = 0;
}
inline int32_t ProcessStatus::_internal_vm_lib() const {
  return vm_lib_;
}
inline int32_t ProcessStatus::vm_lib() const {
  // @@protoc_insertion_point(field_get:ProcessStatus.vm_lib)
  return _internal_vm_lib();
}
inline void ProcessStatus::_internal_set_vm_lib(int32_t value) {
  
  vm_lib_ = value;
}
inline void ProcessStatus::set_vm_lib(int32_t value) {
  _internal_set_vm_lib(value);
  // @@protoc_insertion_point(field_set:ProcessStatus.vm_lib)
}

// int32 vm_pte = 14;
inline void ProcessStatus::clear_vm_pte() {
  vm_pte_ = 0;
}
inline int32_t ProcessStatus::_internal_vm_pte() const {
  return vm_pte_;
}
inline int32_t ProcessStatus::vm_pte() const {
  // @@protoc_insertion_point(field_get:ProcessStatus.vm_pte)
  return _internal_vm_pte();
}
inline void ProcessStatus::_internal_set_vm_pte(int32_t value) {
  
  vm_pte_ = value;
}
inline void ProcessStatus::set_vm_pte(int32_t value) {
  _internal_set_vm_pte(value);
  // @@protoc_insertion_point(field_set:ProcessStatus.vm_pte)
}

// int32 vm_swap = 15;
inline void ProcessStatus::clear_vm_swap() {
  vm_swap_ = 0;
}
inline int32_t ProcessStatus::_internal_vm_swap() const {
  return vm_swap_;
}
inline int32_t ProcessStatus::vm_swap() const {
  // @@protoc_insertion_point(field_get:ProcessStatus.vm_swap)
  return _internal_vm_swap();
}
inline void ProcessStatus::_internal_set_vm_swap(int32_t value) {
  
  vm_swap_ = value;
}
inline void ProcessStatus::set_vm_swap(int32_t value) {
  _internal_set_vm_swap(value);
  // @@protoc_insertion_point(field_set:ProcessStatus.vm_swap)
}

// int32 threads = 16;
inline void ProcessStatus::clear_threads() {
  threads_ = 0;
}
inline int32_t ProcessStatus::_internal_threads() const {
  return threads_;
}
inline int32_t ProcessStatus::threads() const {
  // @@protoc_insertion_point(field_get:ProcessStatus.threads)
  return _internal_threads();
}
inline void ProcessStatus::_internal_set_threads(int32_t value) {
  
  threads_ = value;
}
inline void ProcessStatus::set_threads(int32_t value) {
  _internal_set_threads(value);
  // @@protoc_insertion_point(field_set:ProcessStatus.threads)
}

// int32 voluntary_ctxt_switches = 17;
inline void ProcessStatus::clear_voluntary_ctxt_switches() {
  voluntary_ctxt_switches_ = 0;
}
inline int32_t ProcessStatus::_internal_voluntary_ctxt_switches() const {
  return voluntary_ctxt_switches_;
}
inline int32_t ProcessStatus::voluntary_ctxt_switches() const {
  // @@protoc_insertion_point(field_get:ProcessStatus.voluntary_ctxt_switches)
  return _internal_voluntary_ctxt_switches();
}
inline void ProcessStatus::_internal_set_voluntary_ctxt_switches(int32_t value) {
  
  voluntary_ctxt_switches_ = value;
}
inline void ProcessStatus::set_voluntary_ctxt_switches(int32_t value) {
  _internal_set_voluntary_ctxt_switches(value);
  // @@protoc_insertion_point(field_set:ProcessStatus.voluntary_ctxt_switches)
}

// int32 nonvoluntary_ctxt_switches = 18;
inline void ProcessStatus::clear_nonvoluntary_ctxt_switches() {
  nonvoluntary_ctxt_switches_ = 0;
}
inline int32_t ProcessStatus::_internal_nonvoluntary_ctxt_switches() const {
  return nonvoluntary_ctxt_switches_;
}
inline int32_t ProcessStatus::nonvoluntary_ctxt_switches() const {
  // @@protoc_insertion_point(field_get:ProcessStatus.nonvoluntary_ctxt_switches)
  return _internal_nonvoluntary_ctxt_switches();
}
inline void ProcessStatus::_internal_set_nonvoluntary_ctxt_switches(int32_t value) {
  
  nonvoluntary_ctxt_switches_ = value;
}
inline void ProcessStatus::set_nonvoluntary_ctxt_switches(int32_t value) {
  _internal_set_nonvoluntary_ctxt_switches(value);
  // @@protoc_insertion_point(field_set:ProcessStatus.nonvoluntary_ctxt_switches)
}

// float cpu_percent = 19;
inline void ProcessStatus::clear_cpu_percent() {
  cpu_percent_ = 0;
}
inline float ProcessStatus::_internal_cpu_percent() const {
  return cpu_percent_;
}
inline float ProcessStatus::cpu_percent() const {
  // @@protoc_insertion_point(field_get:ProcessStatus.cpu_percent)
  return _internal_cpu_percent();
}
inline void ProcessStatus::_internal_set_cpu_percent(float value) {
  
  cpu_percent_ = value;
}
inline void ProcessStatus::set_cpu_percent(float value) {
  _internal_set_cpu_percent(value);
  // @@protoc_insertion_point(field_set:ProcessStatus.cpu_percent)
}

// int32 priority = 20;
inline void ProcessStatus::clear_priority() {
  priority_ = 0;
}
inline int32_t ProcessStatus::_internal_priority() const {
  return priority_;
}
inline int32_t ProcessStatus::priority() const {
  // @@protoc_insertion_point(field_get:ProcessStatus.priority)
  return _internal_priority();
}
inline void ProcessStatus::_internal_set_priority(int32_t value) {
  
  priority_ = value;
}
inline void ProcessStatus::set_priority(int32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:ProcessStatus.priority)
}

// int32 nice = 21;
inline void ProcessStatus::clear_nice() {
  nice_ = 0;
}
inline int32_t ProcessStatus::_internal_nice() const {
  return nice_;
}
inline int32_t ProcessStatus::nice() const {
  // @@protoc_insertion_point(field_get:ProcessStatus.nice)
  return _internal_nice();
}
inline void ProcessStatus::_internal_set_nice(int32_t value) {
  
  nice_ = value;
}
inline void ProcessStatus::set_nice(int32_t value) {
  _internal_set_nice(value);
  // @@protoc_insertion_point(field_set:ProcessStatus.nice)
}

// int32 task_cpu = 22;
inline void ProcessStatus::clear_task_cpu() {
  task_cpu_ = 0;
}
inline int32_t ProcessStatus::_internal_task_cpu() const {
  return task_cpu_;
}
inline int32_t ProcessStatus::task_cpu() const {
  // @@protoc_insertion_point(field_get:ProcessStatus.task_cpu)
  return _internal_task_cpu();
}
inline void ProcessStatus::_internal_set_task_cpu(int32_t value) {
  
  task_cpu_ = value;
}
inline void ProcessStatus::set_task_cpu(int32_t value) {
  _internal_set_task_cpu(value);
  // @@protoc_insertion_point(field_set:ProcessStatus.task_cpu)
}

// int32 tr_priority = 23;
inline void ProcessStatus::clear_tr_priority() {
  tr_priority_ = 0;
}
inline int32_t ProcessStatus::_internal_tr_priority() const {
  return tr_priority_;
}
inline int32_t ProcessStatus::tr_priority() const {
  // @@protoc_insertion_point(field_get:ProcessStatus.tr_priority)
  return _internal_tr_priority();
}
inline void ProcessStatus::_internal_set_tr_priority(int32_t value) {
  
  tr_priority_ = value;
}
inline void ProcessStatus::set_tr_priority(int32_t value) {
  _internal_set_tr_priority(value);
  // @@protoc_insertion_point(field_set:ProcessStatus.tr_priority)
}

// int32 policy = 24;
inline void ProcessStatus::clear_policy() {
  policy_ = 0;
}
inline int32_t ProcessStatus::_internal_policy() const {
  return policy_;
}
inline int32_t ProcessStatus::policy() const {
  // @@protoc_insertion_point(field_get:ProcessStatus.policy)
  return _internal_policy();
}
inline void ProcessStatus::_internal_set_policy(int32_t value) {
  
  policy_ = value;
}
inline void ProcessStatus::set_policy(int32_t value) {
  _internal_set_policy(value);
  // @@protoc_insertion_point(field_set:ProcessStatus.policy)
}

// -------------------------------------------------------------------

// TopicMonitorMessage

// string name = 1;
inline void TopicMonitorMessage::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& TopicMonitorMessage::name() const {
  // @@protoc_insertion_point(field_get:TopicMonitorMessage.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicMonitorMessage::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TopicMonitorMessage.name)
}
inline std::string* TopicMonitorMessage::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:TopicMonitorMessage.name)
  return _s;
}
inline const std::string& TopicMonitorMessage::_internal_name() const {
  return name_.Get();
}
inline void TopicMonitorMessage::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicMonitorMessage::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicMonitorMessage::release_name() {
  // @@protoc_insertion_point(field_release:TopicMonitorMessage.name)
  return name_.Release();
}
inline void TopicMonitorMessage::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TopicMonitorMessage.name)
}

// uint64 pub_batch = 2;
inline void TopicMonitorMessage::clear_pub_batch() {
  pub_batch_ = uint64_t{0u};
}
inline uint64_t TopicMonitorMessage::_internal_pub_batch() const {
  return pub_batch_;
}
inline uint64_t TopicMonitorMessage::pub_batch() const {
  // @@protoc_insertion_point(field_get:TopicMonitorMessage.pub_batch)
  return _internal_pub_batch();
}
inline void TopicMonitorMessage::_internal_set_pub_batch(uint64_t value) {
  
  pub_batch_ = value;
}
inline void TopicMonitorMessage::set_pub_batch(uint64_t value) {
  _internal_set_pub_batch(value);
  // @@protoc_insertion_point(field_set:TopicMonitorMessage.pub_batch)
}

// float pub_avg = 3;
inline void TopicMonitorMessage::clear_pub_avg() {
  pub_avg_ = 0;
}
inline float TopicMonitorMessage::_internal_pub_avg() const {
  return pub_avg_;
}
inline float TopicMonitorMessage::pub_avg() const {
  // @@protoc_insertion_point(field_get:TopicMonitorMessage.pub_avg)
  return _internal_pub_avg();
}
inline void TopicMonitorMessage::_internal_set_pub_avg(float value) {
  
  pub_avg_ = value;
}
inline void TopicMonitorMessage::set_pub_avg(float value) {
  _internal_set_pub_avg(value);
  // @@protoc_insertion_point(field_set:TopicMonitorMessage.pub_avg)
}

// float pub_min = 4;
inline void TopicMonitorMessage::clear_pub_min() {
  pub_min_ = 0;
}
inline float TopicMonitorMessage::_internal_pub_min() const {
  return pub_min_;
}
inline float TopicMonitorMessage::pub_min() const {
  // @@protoc_insertion_point(field_get:TopicMonitorMessage.pub_min)
  return _internal_pub_min();
}
inline void TopicMonitorMessage::_internal_set_pub_min(float value) {
  
  pub_min_ = value;
}
inline void TopicMonitorMessage::set_pub_min(float value) {
  _internal_set_pub_min(value);
  // @@protoc_insertion_point(field_set:TopicMonitorMessage.pub_min)
}

// float pub_max = 5;
inline void TopicMonitorMessage::clear_pub_max() {
  pub_max_ = 0;
}
inline float TopicMonitorMessage::_internal_pub_max() const {
  return pub_max_;
}
inline float TopicMonitorMessage::pub_max() const {
  // @@protoc_insertion_point(field_get:TopicMonitorMessage.pub_max)
  return _internal_pub_max();
}
inline void TopicMonitorMessage::_internal_set_pub_max(float value) {
  
  pub_max_ = value;
}
inline void TopicMonitorMessage::set_pub_max(float value) {
  _internal_set_pub_max(value);
  // @@protoc_insertion_point(field_set:TopicMonitorMessage.pub_max)
}

// float pub_var = 6;
inline void TopicMonitorMessage::clear_pub_var() {
  pub_var_ = 0;
}
inline float TopicMonitorMessage::_internal_pub_var() const {
  return pub_var_;
}
inline float TopicMonitorMessage::pub_var() const {
  // @@protoc_insertion_point(field_get:TopicMonitorMessage.pub_var)
  return _internal_pub_var();
}
inline void TopicMonitorMessage::_internal_set_pub_var(float value) {
  
  pub_var_ = value;
}
inline void TopicMonitorMessage::set_pub_var(float value) {
  _internal_set_pub_var(value);
  // @@protoc_insertion_point(field_set:TopicMonitorMessage.pub_var)
}

// uint64 sub_batch = 7;
inline void TopicMonitorMessage::clear_sub_batch() {
  sub_batch_ = uint64_t{0u};
}
inline uint64_t TopicMonitorMessage::_internal_sub_batch() const {
  return sub_batch_;
}
inline uint64_t TopicMonitorMessage::sub_batch() const {
  // @@protoc_insertion_point(field_get:TopicMonitorMessage.sub_batch)
  return _internal_sub_batch();
}
inline void TopicMonitorMessage::_internal_set_sub_batch(uint64_t value) {
  
  sub_batch_ = value;
}
inline void TopicMonitorMessage::set_sub_batch(uint64_t value) {
  _internal_set_sub_batch(value);
  // @@protoc_insertion_point(field_set:TopicMonitorMessage.sub_batch)
}

// float sub_avg = 8;
inline void TopicMonitorMessage::clear_sub_avg() {
  sub_avg_ = 0;
}
inline float TopicMonitorMessage::_internal_sub_avg() const {
  return sub_avg_;
}
inline float TopicMonitorMessage::sub_avg() const {
  // @@protoc_insertion_point(field_get:TopicMonitorMessage.sub_avg)
  return _internal_sub_avg();
}
inline void TopicMonitorMessage::_internal_set_sub_avg(float value) {
  
  sub_avg_ = value;
}
inline void TopicMonitorMessage::set_sub_avg(float value) {
  _internal_set_sub_avg(value);
  // @@protoc_insertion_point(field_set:TopicMonitorMessage.sub_avg)
}

// float sub_min = 9;
inline void TopicMonitorMessage::clear_sub_min() {
  sub_min_ = 0;
}
inline float TopicMonitorMessage::_internal_sub_min() const {
  return sub_min_;
}
inline float TopicMonitorMessage::sub_min() const {
  // @@protoc_insertion_point(field_get:TopicMonitorMessage.sub_min)
  return _internal_sub_min();
}
inline void TopicMonitorMessage::_internal_set_sub_min(float value) {
  
  sub_min_ = value;
}
inline void TopicMonitorMessage::set_sub_min(float value) {
  _internal_set_sub_min(value);
  // @@protoc_insertion_point(field_set:TopicMonitorMessage.sub_min)
}

// float sub_max = 10;
inline void TopicMonitorMessage::clear_sub_max() {
  sub_max_ = 0;
}
inline float TopicMonitorMessage::_internal_sub_max() const {
  return sub_max_;
}
inline float TopicMonitorMessage::sub_max() const {
  // @@protoc_insertion_point(field_get:TopicMonitorMessage.sub_max)
  return _internal_sub_max();
}
inline void TopicMonitorMessage::_internal_set_sub_max(float value) {
  
  sub_max_ = value;
}
inline void TopicMonitorMessage::set_sub_max(float value) {
  _internal_set_sub_max(value);
  // @@protoc_insertion_point(field_set:TopicMonitorMessage.sub_max)
}

// float sub_var = 11;
inline void TopicMonitorMessage::clear_sub_var() {
  sub_var_ = 0;
}
inline float TopicMonitorMessage::_internal_sub_var() const {
  return sub_var_;
}
inline float TopicMonitorMessage::sub_var() const {
  // @@protoc_insertion_point(field_get:TopicMonitorMessage.sub_var)
  return _internal_sub_var();
}
inline void TopicMonitorMessage::_internal_set_sub_var(float value) {
  
  sub_var_ = value;
}
inline void TopicMonitorMessage::set_sub_var(float value) {
  _internal_set_sub_var(value);
  // @@protoc_insertion_point(field_set:TopicMonitorMessage.sub_var)
}

// uint64 sub_miss_batch = 12;
inline void TopicMonitorMessage::clear_sub_miss_batch() {
  sub_miss_batch_ = uint64_t{0u};
}
inline uint64_t TopicMonitorMessage::_internal_sub_miss_batch() const {
  return sub_miss_batch_;
}
inline uint64_t TopicMonitorMessage::sub_miss_batch() const {
  // @@protoc_insertion_point(field_get:TopicMonitorMessage.sub_miss_batch)
  return _internal_sub_miss_batch();
}
inline void TopicMonitorMessage::_internal_set_sub_miss_batch(uint64_t value) {
  
  sub_miss_batch_ = value;
}
inline void TopicMonitorMessage::set_sub_miss_batch(uint64_t value) {
  _internal_set_sub_miss_batch(value);
  // @@protoc_insertion_point(field_set:TopicMonitorMessage.sub_miss_batch)
}

// uint64 sub_discard_batch = 13;
inline void TopicMonitorMessage::clear_sub_discard_batch() {
  sub_discard_batch_ = uint64_t{0u};
}
inline uint64_t TopicMonitorMessage::_internal_sub_discard_batch() const {
  return sub_discard_batch_;
}
inline uint64_t TopicMonitorMessage::sub_discard_batch() const {
  // @@protoc_insertion_point(field_get:TopicMonitorMessage.sub_discard_batch)
  return _internal_sub_discard_batch();
}
inline void TopicMonitorMessage::_internal_set_sub_discard_batch(uint64_t value) {
  
  sub_discard_batch_ = value;
}
inline void TopicMonitorMessage::set_sub_discard_batch(uint64_t value) {
  _internal_set_sub_discard_batch(value);
  // @@protoc_insertion_point(field_set:TopicMonitorMessage.sub_discard_batch)
}

// -------------------------------------------------------------------

// EventCallbackMonitorMessage

// float latency_avg = 1;
inline void EventCallbackMonitorMessage::clear_latency_avg() {
  latency_avg_ = 0;
}
inline float EventCallbackMonitorMessage::_internal_latency_avg() const {
  return latency_avg_;
}
inline float EventCallbackMonitorMessage::latency_avg() const {
  // @@protoc_insertion_point(field_get:EventCallbackMonitorMessage.latency_avg)
  return _internal_latency_avg();
}
inline void EventCallbackMonitorMessage::_internal_set_latency_avg(float value) {
  
  latency_avg_ = value;
}
inline void EventCallbackMonitorMessage::set_latency_avg(float value) {
  _internal_set_latency_avg(value);
  // @@protoc_insertion_point(field_set:EventCallbackMonitorMessage.latency_avg)
}

// float latency_min = 2;
inline void EventCallbackMonitorMessage::clear_latency_min() {
  latency_min_ = 0;
}
inline float EventCallbackMonitorMessage::_internal_latency_min() const {
  return latency_min_;
}
inline float EventCallbackMonitorMessage::latency_min() const {
  // @@protoc_insertion_point(field_get:EventCallbackMonitorMessage.latency_min)
  return _internal_latency_min();
}
inline void EventCallbackMonitorMessage::_internal_set_latency_min(float value) {
  
  latency_min_ = value;
}
inline void EventCallbackMonitorMessage::set_latency_min(float value) {
  _internal_set_latency_min(value);
  // @@protoc_insertion_point(field_set:EventCallbackMonitorMessage.latency_min)
}

// float latency_max = 3;
inline void EventCallbackMonitorMessage::clear_latency_max() {
  latency_max_ = 0;
}
inline float EventCallbackMonitorMessage::_internal_latency_max() const {
  return latency_max_;
}
inline float EventCallbackMonitorMessage::latency_max() const {
  // @@protoc_insertion_point(field_get:EventCallbackMonitorMessage.latency_max)
  return _internal_latency_max();
}
inline void EventCallbackMonitorMessage::_internal_set_latency_max(float value) {
  
  latency_max_ = value;
}
inline void EventCallbackMonitorMessage::set_latency_max(float value) {
  _internal_set_latency_max(value);
  // @@protoc_insertion_point(field_set:EventCallbackMonitorMessage.latency_max)
}

// float latency_var = 4;
inline void EventCallbackMonitorMessage::clear_latency_var() {
  latency_var_ = 0;
}
inline float EventCallbackMonitorMessage::_internal_latency_var() const {
  return latency_var_;
}
inline float EventCallbackMonitorMessage::latency_var() const {
  // @@protoc_insertion_point(field_get:EventCallbackMonitorMessage.latency_var)
  return _internal_latency_var();
}
inline void EventCallbackMonitorMessage::_internal_set_latency_var(float value) {
  
  latency_var_ = value;
}
inline void EventCallbackMonitorMessage::set_latency_var(float value) {
  _internal_set_latency_var(value);
  // @@protoc_insertion_point(field_set:EventCallbackMonitorMessage.latency_var)
}

// float spend_avg = 5;
inline void EventCallbackMonitorMessage::clear_spend_avg() {
  spend_avg_ = 0;
}
inline float EventCallbackMonitorMessage::_internal_spend_avg() const {
  return spend_avg_;
}
inline float EventCallbackMonitorMessage::spend_avg() const {
  // @@protoc_insertion_point(field_get:EventCallbackMonitorMessage.spend_avg)
  return _internal_spend_avg();
}
inline void EventCallbackMonitorMessage::_internal_set_spend_avg(float value) {
  
  spend_avg_ = value;
}
inline void EventCallbackMonitorMessage::set_spend_avg(float value) {
  _internal_set_spend_avg(value);
  // @@protoc_insertion_point(field_set:EventCallbackMonitorMessage.spend_avg)
}

// float spend_min = 6;
inline void EventCallbackMonitorMessage::clear_spend_min() {
  spend_min_ = 0;
}
inline float EventCallbackMonitorMessage::_internal_spend_min() const {
  return spend_min_;
}
inline float EventCallbackMonitorMessage::spend_min() const {
  // @@protoc_insertion_point(field_get:EventCallbackMonitorMessage.spend_min)
  return _internal_spend_min();
}
inline void EventCallbackMonitorMessage::_internal_set_spend_min(float value) {
  
  spend_min_ = value;
}
inline void EventCallbackMonitorMessage::set_spend_min(float value) {
  _internal_set_spend_min(value);
  // @@protoc_insertion_point(field_set:EventCallbackMonitorMessage.spend_min)
}

// float spend_max = 7;
inline void EventCallbackMonitorMessage::clear_spend_max() {
  spend_max_ = 0;
}
inline float EventCallbackMonitorMessage::_internal_spend_max() const {
  return spend_max_;
}
inline float EventCallbackMonitorMessage::spend_max() const {
  // @@protoc_insertion_point(field_get:EventCallbackMonitorMessage.spend_max)
  return _internal_spend_max();
}
inline void EventCallbackMonitorMessage::_internal_set_spend_max(float value) {
  
  spend_max_ = value;
}
inline void EventCallbackMonitorMessage::set_spend_max(float value) {
  _internal_set_spend_max(value);
  // @@protoc_insertion_point(field_set:EventCallbackMonitorMessage.spend_max)
}

// float spend_var = 8;
inline void EventCallbackMonitorMessage::clear_spend_var() {
  spend_var_ = 0;
}
inline float EventCallbackMonitorMessage::_internal_spend_var() const {
  return spend_var_;
}
inline float EventCallbackMonitorMessage::spend_var() const {
  // @@protoc_insertion_point(field_get:EventCallbackMonitorMessage.spend_var)
  return _internal_spend_var();
}
inline void EventCallbackMonitorMessage::_internal_set_spend_var(float value) {
  
  spend_var_ = value;
}
inline void EventCallbackMonitorMessage::set_spend_var(float value) {
  _internal_set_spend_var(value);
  // @@protoc_insertion_point(field_set:EventCallbackMonitorMessage.spend_var)
}

// -------------------------------------------------------------------

// TimerCallbackMonitorMessage

// float sleep_avg = 1;
inline void TimerCallbackMonitorMessage::clear_sleep_avg() {
  sleep_avg_ = 0;
}
inline float TimerCallbackMonitorMessage::_internal_sleep_avg() const {
  return sleep_avg_;
}
inline float TimerCallbackMonitorMessage::sleep_avg() const {
  // @@protoc_insertion_point(field_get:TimerCallbackMonitorMessage.sleep_avg)
  return _internal_sleep_avg();
}
inline void TimerCallbackMonitorMessage::_internal_set_sleep_avg(float value) {
  
  sleep_avg_ = value;
}
inline void TimerCallbackMonitorMessage::set_sleep_avg(float value) {
  _internal_set_sleep_avg(value);
  // @@protoc_insertion_point(field_set:TimerCallbackMonitorMessage.sleep_avg)
}

// float sleep_min = 2;
inline void TimerCallbackMonitorMessage::clear_sleep_min() {
  sleep_min_ = 0;
}
inline float TimerCallbackMonitorMessage::_internal_sleep_min() const {
  return sleep_min_;
}
inline float TimerCallbackMonitorMessage::sleep_min() const {
  // @@protoc_insertion_point(field_get:TimerCallbackMonitorMessage.sleep_min)
  return _internal_sleep_min();
}
inline void TimerCallbackMonitorMessage::_internal_set_sleep_min(float value) {
  
  sleep_min_ = value;
}
inline void TimerCallbackMonitorMessage::set_sleep_min(float value) {
  _internal_set_sleep_min(value);
  // @@protoc_insertion_point(field_set:TimerCallbackMonitorMessage.sleep_min)
}

// float sleep_max = 3;
inline void TimerCallbackMonitorMessage::clear_sleep_max() {
  sleep_max_ = 0;
}
inline float TimerCallbackMonitorMessage::_internal_sleep_max() const {
  return sleep_max_;
}
inline float TimerCallbackMonitorMessage::sleep_max() const {
  // @@protoc_insertion_point(field_get:TimerCallbackMonitorMessage.sleep_max)
  return _internal_sleep_max();
}
inline void TimerCallbackMonitorMessage::_internal_set_sleep_max(float value) {
  
  sleep_max_ = value;
}
inline void TimerCallbackMonitorMessage::set_sleep_max(float value) {
  _internal_set_sleep_max(value);
  // @@protoc_insertion_point(field_set:TimerCallbackMonitorMessage.sleep_max)
}

// float sleep_var = 4;
inline void TimerCallbackMonitorMessage::clear_sleep_var() {
  sleep_var_ = 0;
}
inline float TimerCallbackMonitorMessage::_internal_sleep_var() const {
  return sleep_var_;
}
inline float TimerCallbackMonitorMessage::sleep_var() const {
  // @@protoc_insertion_point(field_get:TimerCallbackMonitorMessage.sleep_var)
  return _internal_sleep_var();
}
inline void TimerCallbackMonitorMessage::_internal_set_sleep_var(float value) {
  
  sleep_var_ = value;
}
inline void TimerCallbackMonitorMessage::set_sleep_var(float value) {
  _internal_set_sleep_var(value);
  // @@protoc_insertion_point(field_set:TimerCallbackMonitorMessage.sleep_var)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NodeMonitorMessage

// .ProcessStatus process_status = 1;
inline bool NodeMonitorMessage::_internal_has_process_status() const {
  return this != internal_default_instance() && process_status_ != nullptr;
}
inline bool NodeMonitorMessage::has_process_status() const {
  return _internal_has_process_status();
}
inline void NodeMonitorMessage::clear_process_status() {
  if (GetArenaForAllocation() == nullptr && process_status_ != nullptr) {
    delete process_status_;
  }
  process_status_ = nullptr;
}
inline const ::ProcessStatus& NodeMonitorMessage::_internal_process_status() const {
  const ::ProcessStatus* p = process_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProcessStatus&>(
      ::_ProcessStatus_default_instance_);
}
inline const ::ProcessStatus& NodeMonitorMessage::process_status() const {
  // @@protoc_insertion_point(field_get:NodeMonitorMessage.process_status)
  return _internal_process_status();
}
inline void NodeMonitorMessage::unsafe_arena_set_allocated_process_status(
    ::ProcessStatus* process_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(process_status_);
  }
  process_status_ = process_status;
  if (process_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NodeMonitorMessage.process_status)
}
inline ::ProcessStatus* NodeMonitorMessage::release_process_status() {
  
  ::ProcessStatus* temp = process_status_;
  process_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProcessStatus* NodeMonitorMessage::unsafe_arena_release_process_status() {
  // @@protoc_insertion_point(field_release:NodeMonitorMessage.process_status)
  
  ::ProcessStatus* temp = process_status_;
  process_status_ = nullptr;
  return temp;
}
inline ::ProcessStatus* NodeMonitorMessage::_internal_mutable_process_status() {
  
  if (process_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProcessStatus>(GetArenaForAllocation());
    process_status_ = p;
  }
  return process_status_;
}
inline ::ProcessStatus* NodeMonitorMessage::mutable_process_status() {
  ::ProcessStatus* _msg = _internal_mutable_process_status();
  // @@protoc_insertion_point(field_mutable:NodeMonitorMessage.process_status)
  return _msg;
}
inline void NodeMonitorMessage::set_allocated_process_status(::ProcessStatus* process_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete process_status_;
  }
  if (process_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(process_status);
    if (message_arena != submessage_arena) {
      process_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, process_status, submessage_arena);
    }
    
  } else {
    
  }
  process_status_ = process_status;
  // @@protoc_insertion_point(field_set_allocated:NodeMonitorMessage.process_status)
}

// map<string, .TopicMonitorMessage> topic_infos = 2;
inline int NodeMonitorMessage::_internal_topic_infos_size() const {
  return topic_infos_.size();
}
inline int NodeMonitorMessage::topic_infos_size() const {
  return _internal_topic_infos_size();
}
inline void NodeMonitorMessage::clear_topic_infos() {
  topic_infos_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TopicMonitorMessage >&
NodeMonitorMessage::_internal_topic_infos() const {
  return topic_infos_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TopicMonitorMessage >&
NodeMonitorMessage::topic_infos() const {
  // @@protoc_insertion_point(field_map:NodeMonitorMessage.topic_infos)
  return _internal_topic_infos();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TopicMonitorMessage >*
NodeMonitorMessage::_internal_mutable_topic_infos() {
  return topic_infos_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TopicMonitorMessage >*
NodeMonitorMessage::mutable_topic_infos() {
  // @@protoc_insertion_point(field_mutable_map:NodeMonitorMessage.topic_infos)
  return _internal_mutable_topic_infos();
}

// map<string, .EventCallbackMonitorMessage> event_infos = 3;
inline int NodeMonitorMessage::_internal_event_infos_size() const {
  return event_infos_.size();
}
inline int NodeMonitorMessage::event_infos_size() const {
  return _internal_event_infos_size();
}
inline void NodeMonitorMessage::clear_event_infos() {
  event_infos_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::EventCallbackMonitorMessage >&
NodeMonitorMessage::_internal_event_infos() const {
  return event_infos_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::EventCallbackMonitorMessage >&
NodeMonitorMessage::event_infos() const {
  // @@protoc_insertion_point(field_map:NodeMonitorMessage.event_infos)
  return _internal_event_infos();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::EventCallbackMonitorMessage >*
NodeMonitorMessage::_internal_mutable_event_infos() {
  return event_infos_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::EventCallbackMonitorMessage >*
NodeMonitorMessage::mutable_event_infos() {
  // @@protoc_insertion_point(field_mutable_map:NodeMonitorMessage.event_infos)
  return _internal_mutable_event_infos();
}

// map<int32, .TimerCallbackMonitorMessage> timer_infos = 4;
inline int NodeMonitorMessage::_internal_timer_infos_size() const {
  return timer_infos_.size();
}
inline int NodeMonitorMessage::timer_infos_size() const {
  return _internal_timer_infos_size();
}
inline void NodeMonitorMessage::clear_timer_infos() {
  timer_infos_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::TimerCallbackMonitorMessage >&
NodeMonitorMessage::_internal_timer_infos() const {
  return timer_infos_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::TimerCallbackMonitorMessage >&
NodeMonitorMessage::timer_infos() const {
  // @@protoc_insertion_point(field_map:NodeMonitorMessage.timer_infos)
  return _internal_timer_infos();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::TimerCallbackMonitorMessage >*
NodeMonitorMessage::_internal_mutable_timer_infos() {
  return timer_infos_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::TimerCallbackMonitorMessage >*
NodeMonitorMessage::mutable_timer_infos() {
  // @@protoc_insertion_point(field_mutable_map:NodeMonitorMessage.timer_infos)
  return _internal_mutable_timer_infos();
}

// -------------------------------------------------------------------

// EventFuncInfo

// double latency = 1;
inline void EventFuncInfo::clear_latency() {
  latency_ = 0;
}
inline double EventFuncInfo::_internal_latency() const {
  return latency_;
}
inline double EventFuncInfo::latency() const {
  // @@protoc_insertion_point(field_get:EventFuncInfo.latency)
  return _internal_latency();
}
inline void EventFuncInfo::_internal_set_latency(double value) {
  
  latency_ = value;
}
inline void EventFuncInfo::set_latency(double value) {
  _internal_set_latency(value);
  // @@protoc_insertion_point(field_set:EventFuncInfo.latency)
}

// double spend = 2;
inline void EventFuncInfo::clear_spend() {
  spend_ = 0;
}
inline double EventFuncInfo::_internal_spend() const {
  return spend_;
}
inline double EventFuncInfo::spend() const {
  // @@protoc_insertion_point(field_get:EventFuncInfo.spend)
  return _internal_spend();
}
inline void EventFuncInfo::_internal_set_spend(double value) {
  
  spend_ = value;
}
inline void EventFuncInfo::set_spend(double value) {
  _internal_set_spend(value);
  // @@protoc_insertion_point(field_set:EventFuncInfo.spend)
}

// double spend_cpu = 3;
inline void EventFuncInfo::clear_spend_cpu() {
  spend_cpu_ = 0;
}
inline double EventFuncInfo::_internal_spend_cpu() const {
  return spend_cpu_;
}
inline double EventFuncInfo::spend_cpu() const {
  // @@protoc_insertion_point(field_get:EventFuncInfo.spend_cpu)
  return _internal_spend_cpu();
}
inline void EventFuncInfo::_internal_set_spend_cpu(double value) {
  
  spend_cpu_ = value;
}
inline void EventFuncInfo::set_spend_cpu(double value) {
  _internal_set_spend_cpu(value);
  // @@protoc_insertion_point(field_set:EventFuncInfo.spend_cpu)
}

// -------------------------------------------------------------------

// TimerFuncInfo

// double spend = 1;
inline void TimerFuncInfo::clear_spend() {
  spend_ = 0;
}
inline double TimerFuncInfo::_internal_spend() const {
  return spend_;
}
inline double TimerFuncInfo::spend() const {
  // @@protoc_insertion_point(field_get:TimerFuncInfo.spend)
  return _internal_spend();
}
inline void TimerFuncInfo::_internal_set_spend(double value) {
  
  spend_ = value;
}
inline void TimerFuncInfo::set_spend(double value) {
  _internal_set_spend(value);
  // @@protoc_insertion_point(field_set:TimerFuncInfo.spend)
}

// double sleep = 2;
inline void TimerFuncInfo::clear_sleep() {
  sleep_ = 0;
}
inline double TimerFuncInfo::_internal_sleep() const {
  return sleep_;
}
inline double TimerFuncInfo::sleep() const {
  // @@protoc_insertion_point(field_get:TimerFuncInfo.sleep)
  return _internal_sleep();
}
inline void TimerFuncInfo::_internal_set_sleep(double value) {
  
  sleep_ = value;
}
inline void TimerFuncInfo::set_sleep(double value) {
  _internal_set_sleep(value);
  // @@protoc_insertion_point(field_set:TimerFuncInfo.sleep)
}

// double spend_cpu = 3;
inline void TimerFuncInfo::clear_spend_cpu() {
  spend_cpu_ = 0;
}
inline double TimerFuncInfo::_internal_spend_cpu() const {
  return spend_cpu_;
}
inline double TimerFuncInfo::spend_cpu() const {
  // @@protoc_insertion_point(field_get:TimerFuncInfo.spend_cpu)
  return _internal_spend_cpu();
}
inline void TimerFuncInfo::_internal_set_spend_cpu(double value) {
  
  spend_cpu_ = value;
}
inline void TimerFuncInfo::set_spend_cpu(double value) {
  _internal_set_spend_cpu(value);
  // @@protoc_insertion_point(field_set:TimerFuncInfo.spend_cpu)
}

// -------------------------------------------------------------------

// PubInfo

// double interval = 1;
inline void PubInfo::clear_interval() {
  interval_ = 0;
}
inline double PubInfo::_internal_interval() const {
  return interval_;
}
inline double PubInfo::interval() const {
  // @@protoc_insertion_point(field_get:PubInfo.interval)
  return _internal_interval();
}
inline void PubInfo::_internal_set_interval(double value) {
  
  interval_ = value;
}
inline void PubInfo::set_interval(double value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:PubInfo.interval)
}

// int32 batch = 2;
inline void PubInfo::clear_batch() {
  batch_ = 0;
}
inline int32_t PubInfo::_internal_batch() const {
  return batch_;
}
inline int32_t PubInfo::batch() const {
  // @@protoc_insertion_point(field_get:PubInfo.batch)
  return _internal_batch();
}
inline void PubInfo::_internal_set_batch(int32_t value) {
  
  batch_ = value;
}
inline void PubInfo::set_batch(int32_t value) {
  _internal_set_batch(value);
  // @@protoc_insertion_point(field_set:PubInfo.batch)
}

// -------------------------------------------------------------------

// SubInfo

// double latency = 1;
inline void SubInfo::clear_latency() {
  latency_ = 0;
}
inline double SubInfo::_internal_latency() const {
  return latency_;
}
inline double SubInfo::latency() const {
  // @@protoc_insertion_point(field_get:SubInfo.latency)
  return _internal_latency();
}
inline void SubInfo::_internal_set_latency(double value) {
  
  latency_ = value;
}
inline void SubInfo::set_latency(double value) {
  _internal_set_latency(value);
  // @@protoc_insertion_point(field_set:SubInfo.latency)
}

// int32 miss_batch = 2;
inline void SubInfo::clear_miss_batch() {
  miss_batch_ = 0;
}
inline int32_t SubInfo::_internal_miss_batch() const {
  return miss_batch_;
}
inline int32_t SubInfo::miss_batch() const {
  // @@protoc_insertion_point(field_get:SubInfo.miss_batch)
  return _internal_miss_batch();
}
inline void SubInfo::_internal_set_miss_batch(int32_t value) {
  
  miss_batch_ = value;
}
inline void SubInfo::set_miss_batch(int32_t value) {
  _internal_set_miss_batch(value);
  // @@protoc_insertion_point(field_set:SubInfo.miss_batch)
}

// int64 batch = 3;
inline void SubInfo::clear_batch() {
  batch_ = int64_t{0};
}
inline int64_t SubInfo::_internal_batch() const {
  return batch_;
}
inline int64_t SubInfo::batch() const {
  // @@protoc_insertion_point(field_get:SubInfo.batch)
  return _internal_batch();
}
inline void SubInfo::_internal_set_batch(int64_t value) {
  
  batch_ = value;
}
inline void SubInfo::set_batch(int64_t value) {
  _internal_set_batch(value);
  // @@protoc_insertion_point(field_set:SubInfo.batch)
}

// -------------------------------------------------------------------

// SystemInfo

// int32 mem_total = 1;
inline void SystemInfo::clear_mem_total() {
  mem_total_ = 0;
}
inline int32_t SystemInfo::_internal_mem_total() const {
  return mem_total_;
}
inline int32_t SystemInfo::mem_total() const {
  // @@protoc_insertion_point(field_get:SystemInfo.mem_total)
  return _internal_mem_total();
}
inline void SystemInfo::_internal_set_mem_total(int32_t value) {
  
  mem_total_ = value;
}
inline void SystemInfo::set_mem_total(int32_t value) {
  _internal_set_mem_total(value);
  // @@protoc_insertion_point(field_set:SystemInfo.mem_total)
}

// int32 mem_free = 2;
inline void SystemInfo::clear_mem_free() {
  mem_free_ = 0;
}
inline int32_t SystemInfo::_internal_mem_free() const {
  return mem_free_;
}
inline int32_t SystemInfo::mem_free() const {
  // @@protoc_insertion_point(field_get:SystemInfo.mem_free)
  return _internal_mem_free();
}
inline void SystemInfo::_internal_set_mem_free(int32_t value) {
  
  mem_free_ = value;
}
inline void SystemInfo::set_mem_free(int32_t value) {
  _internal_set_mem_free(value);
  // @@protoc_insertion_point(field_set:SystemInfo.mem_free)
}

// int32 mem_available = 3;
inline void SystemInfo::clear_mem_available() {
  mem_available_ = 0;
}
inline int32_t SystemInfo::_internal_mem_available() const {
  return mem_available_;
}
inline int32_t SystemInfo::mem_available() const {
  // @@protoc_insertion_point(field_get:SystemInfo.mem_available)
  return _internal_mem_available();
}
inline void SystemInfo::_internal_set_mem_available(int32_t value) {
  
  mem_available_ = value;
}
inline void SystemInfo::set_mem_available(int32_t value) {
  _internal_set_mem_available(value);
  // @@protoc_insertion_point(field_set:SystemInfo.mem_available)
}

// int32 buffers = 4;
inline void SystemInfo::clear_buffers() {
  buffers_ = 0;
}
inline int32_t SystemInfo::_internal_buffers() const {
  return buffers_;
}
inline int32_t SystemInfo::buffers() const {
  // @@protoc_insertion_point(field_get:SystemInfo.buffers)
  return _internal_buffers();
}
inline void SystemInfo::_internal_set_buffers(int32_t value) {
  
  buffers_ = value;
}
inline void SystemInfo::set_buffers(int32_t value) {
  _internal_set_buffers(value);
  // @@protoc_insertion_point(field_set:SystemInfo.buffers)
}

// int32 cached = 5;
inline void SystemInfo::clear_cached() {
  cached_ = 0;
}
inline int32_t SystemInfo::_internal_cached() const {
  return cached_;
}
inline int32_t SystemInfo::cached() const {
  // @@protoc_insertion_point(field_get:SystemInfo.cached)
  return _internal_cached();
}
inline void SystemInfo::_internal_set_cached(int32_t value) {
  
  cached_ = value;
}
inline void SystemInfo::set_cached(int32_t value) {
  _internal_set_cached(value);
  // @@protoc_insertion_point(field_set:SystemInfo.cached)
}

// int32 swap_total = 6;
inline void SystemInfo::clear_swap_total() {
  swap_total_ = 0;
}
inline int32_t SystemInfo::_internal_swap_total() const {
  return swap_total_;
}
inline int32_t SystemInfo::swap_total() const {
  // @@protoc_insertion_point(field_get:SystemInfo.swap_total)
  return _internal_swap_total();
}
inline void SystemInfo::_internal_set_swap_total(int32_t value) {
  
  swap_total_ = value;
}
inline void SystemInfo::set_swap_total(int32_t value) {
  _internal_set_swap_total(value);
  // @@protoc_insertion_point(field_set:SystemInfo.swap_total)
}

// int32 swap_free = 7;
inline void SystemInfo::clear_swap_free() {
  swap_free_ = 0;
}
inline int32_t SystemInfo::_internal_swap_free() const {
  return swap_free_;
}
inline int32_t SystemInfo::swap_free() const {
  // @@protoc_insertion_point(field_get:SystemInfo.swap_free)
  return _internal_swap_free();
}
inline void SystemInfo::_internal_set_swap_free(int32_t value) {
  
  swap_free_ = value;
}
inline void SystemInfo::set_swap_free(int32_t value) {
  _internal_set_swap_free(value);
  // @@protoc_insertion_point(field_set:SystemInfo.swap_free)
}

// repeated float cpu_use = 8;
inline int SystemInfo::_internal_cpu_use_size() const {
  return cpu_use_.size();
}
inline int SystemInfo::cpu_use_size() const {
  return _internal_cpu_use_size();
}
inline void SystemInfo::clear_cpu_use() {
  cpu_use_.Clear();
}
inline float SystemInfo::_internal_cpu_use(int index) const {
  return cpu_use_.Get(index);
}
inline float SystemInfo::cpu_use(int index) const {
  // @@protoc_insertion_point(field_get:SystemInfo.cpu_use)
  return _internal_cpu_use(index);
}
inline void SystemInfo::set_cpu_use(int index, float value) {
  cpu_use_.Set(index, value);
  // @@protoc_insertion_point(field_set:SystemInfo.cpu_use)
}
inline void SystemInfo::_internal_add_cpu_use(float value) {
  cpu_use_.Add(value);
}
inline void SystemInfo::add_cpu_use(float value) {
  _internal_add_cpu_use(value);
  // @@protoc_insertion_point(field_add:SystemInfo.cpu_use)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SystemInfo::_internal_cpu_use() const {
  return cpu_use_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SystemInfo::cpu_use() const {
  // @@protoc_insertion_point(field_list:SystemInfo.cpu_use)
  return _internal_cpu_use();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SystemInfo::_internal_mutable_cpu_use() {
  return &cpu_use_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SystemInfo::mutable_cpu_use() {
  // @@protoc_insertion_point(field_mutable_list:SystemInfo.cpu_use)
  return _internal_mutable_cpu_use();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kmonitor_2eproto
