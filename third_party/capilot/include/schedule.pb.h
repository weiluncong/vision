// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schedule.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_schedule_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_schedule_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_schedule_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_schedule_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_schedule_2eproto;
namespace capilot {
class ScheduleReply;
struct ScheduleReplyDefaultTypeInternal;
extern ScheduleReplyDefaultTypeInternal _ScheduleReply_default_instance_;
class ScheduleRequest;
struct ScheduleRequestDefaultTypeInternal;
extern ScheduleRequestDefaultTypeInternal _ScheduleRequest_default_instance_;
}  // namespace capilot
PROTOBUF_NAMESPACE_OPEN
template<> ::capilot::ScheduleReply* Arena::CreateMaybeMessage<::capilot::ScheduleReply>(Arena*);
template<> ::capilot::ScheduleRequest* Arena::CreateMaybeMessage<::capilot::ScheduleRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace capilot {

// ===================================================================

class ScheduleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:capilot.ScheduleRequest) */ {
 public:
  inline ScheduleRequest() : ScheduleRequest(nullptr) {}
  ~ScheduleRequest() override;
  explicit PROTOBUF_CONSTEXPR ScheduleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScheduleRequest(const ScheduleRequest& from);
  ScheduleRequest(ScheduleRequest&& from) noexcept
    : ScheduleRequest() {
    *this = ::std::move(from);
  }

  inline ScheduleRequest& operator=(const ScheduleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScheduleRequest& operator=(ScheduleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScheduleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScheduleRequest* internal_default_instance() {
    return reinterpret_cast<const ScheduleRequest*>(
               &_ScheduleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ScheduleRequest& a, ScheduleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ScheduleRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScheduleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScheduleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScheduleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScheduleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ScheduleRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScheduleRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "capilot.ScheduleRequest";
  }
  protected:
  explicit ScheduleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeNameFieldNumber = 2,
    kTaskNameFieldNumber = 3,
    kScheduleTypeFieldNumber = 1,
  };
  // string node_name = 2;
  void clear_node_name();
  const std::string& node_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_node_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_node_name();
  PROTOBUF_NODISCARD std::string* release_node_name();
  void set_allocated_node_name(std::string* node_name);
  private:
  const std::string& _internal_node_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_name(const std::string& value);
  std::string* _internal_mutable_node_name();
  public:

  // string task_name = 3;
  void clear_task_name();
  const std::string& task_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_name();
  PROTOBUF_NODISCARD std::string* release_task_name();
  void set_allocated_task_name(std::string* task_name);
  private:
  const std::string& _internal_task_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_name(const std::string& value);
  std::string* _internal_mutable_task_name();
  public:

  // uint32 schedule_type = 1;
  void clear_schedule_type();
  uint32_t schedule_type() const;
  void set_schedule_type(uint32_t value);
  private:
  uint32_t _internal_schedule_type() const;
  void _internal_set_schedule_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:capilot.ScheduleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_name_;
  uint32_t schedule_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schedule_2eproto;
};
// -------------------------------------------------------------------

class ScheduleReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:capilot.ScheduleReply) */ {
 public:
  inline ScheduleReply() : ScheduleReply(nullptr) {}
  ~ScheduleReply() override;
  explicit PROTOBUF_CONSTEXPR ScheduleReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScheduleReply(const ScheduleReply& from);
  ScheduleReply(ScheduleReply&& from) noexcept
    : ScheduleReply() {
    *this = ::std::move(from);
  }

  inline ScheduleReply& operator=(const ScheduleReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScheduleReply& operator=(ScheduleReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScheduleReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScheduleReply* internal_default_instance() {
    return reinterpret_cast<const ScheduleReply*>(
               &_ScheduleReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ScheduleReply& a, ScheduleReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ScheduleReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScheduleReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScheduleReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScheduleReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScheduleReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ScheduleReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScheduleReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "capilot.ScheduleReply";
  }
  protected:
  explicit ScheduleReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorInfoFieldNumber = 2,
    kIsSuccessFieldNumber = 1,
  };
  // string error_info = 2;
  void clear_error_info();
  const std::string& error_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_info();
  PROTOBUF_NODISCARD std::string* release_error_info();
  void set_allocated_error_info(std::string* error_info);
  private:
  const std::string& _internal_error_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_info(const std::string& value);
  std::string* _internal_mutable_error_info();
  public:

  // bool is_success = 1;
  void clear_is_success();
  bool is_success() const;
  void set_is_success(bool value);
  private:
  bool _internal_is_success() const;
  void _internal_set_is_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:capilot.ScheduleReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_info_;
  bool is_success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schedule_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ScheduleRequest

// uint32 schedule_type = 1;
inline void ScheduleRequest::clear_schedule_type() {
  schedule_type_ = 0u;
}
inline uint32_t ScheduleRequest::_internal_schedule_type() const {
  return schedule_type_;
}
inline uint32_t ScheduleRequest::schedule_type() const {
  // @@protoc_insertion_point(field_get:capilot.ScheduleRequest.schedule_type)
  return _internal_schedule_type();
}
inline void ScheduleRequest::_internal_set_schedule_type(uint32_t value) {
  
  schedule_type_ = value;
}
inline void ScheduleRequest::set_schedule_type(uint32_t value) {
  _internal_set_schedule_type(value);
  // @@protoc_insertion_point(field_set:capilot.ScheduleRequest.schedule_type)
}

// string node_name = 2;
inline void ScheduleRequest::clear_node_name() {
  node_name_.ClearToEmpty();
}
inline const std::string& ScheduleRequest::node_name() const {
  // @@protoc_insertion_point(field_get:capilot.ScheduleRequest.node_name)
  return _internal_node_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ScheduleRequest::set_node_name(ArgT0&& arg0, ArgT... args) {
 
 node_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:capilot.ScheduleRequest.node_name)
}
inline std::string* ScheduleRequest::mutable_node_name() {
  std::string* _s = _internal_mutable_node_name();
  // @@protoc_insertion_point(field_mutable:capilot.ScheduleRequest.node_name)
  return _s;
}
inline const std::string& ScheduleRequest::_internal_node_name() const {
  return node_name_.Get();
}
inline void ScheduleRequest::_internal_set_node_name(const std::string& value) {
  
  node_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ScheduleRequest::_internal_mutable_node_name() {
  
  return node_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ScheduleRequest::release_node_name() {
  // @@protoc_insertion_point(field_release:capilot.ScheduleRequest.node_name)
  return node_name_.Release();
}
inline void ScheduleRequest::set_allocated_node_name(std::string* node_name) {
  if (node_name != nullptr) {
    
  } else {
    
  }
  node_name_.SetAllocated(node_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (node_name_.IsDefault()) {
    node_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:capilot.ScheduleRequest.node_name)
}

// string task_name = 3;
inline void ScheduleRequest::clear_task_name() {
  task_name_.ClearToEmpty();
}
inline const std::string& ScheduleRequest::task_name() const {
  // @@protoc_insertion_point(field_get:capilot.ScheduleRequest.task_name)
  return _internal_task_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ScheduleRequest::set_task_name(ArgT0&& arg0, ArgT... args) {
 
 task_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:capilot.ScheduleRequest.task_name)
}
inline std::string* ScheduleRequest::mutable_task_name() {
  std::string* _s = _internal_mutable_task_name();
  // @@protoc_insertion_point(field_mutable:capilot.ScheduleRequest.task_name)
  return _s;
}
inline const std::string& ScheduleRequest::_internal_task_name() const {
  return task_name_.Get();
}
inline void ScheduleRequest::_internal_set_task_name(const std::string& value) {
  
  task_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ScheduleRequest::_internal_mutable_task_name() {
  
  return task_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ScheduleRequest::release_task_name() {
  // @@protoc_insertion_point(field_release:capilot.ScheduleRequest.task_name)
  return task_name_.Release();
}
inline void ScheduleRequest::set_allocated_task_name(std::string* task_name) {
  if (task_name != nullptr) {
    
  } else {
    
  }
  task_name_.SetAllocated(task_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (task_name_.IsDefault()) {
    task_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:capilot.ScheduleRequest.task_name)
}

// -------------------------------------------------------------------

// ScheduleReply

// bool is_success = 1;
inline void ScheduleReply::clear_is_success() {
  is_success_ = false;
}
inline bool ScheduleReply::_internal_is_success() const {
  return is_success_;
}
inline bool ScheduleReply::is_success() const {
  // @@protoc_insertion_point(field_get:capilot.ScheduleReply.is_success)
  return _internal_is_success();
}
inline void ScheduleReply::_internal_set_is_success(bool value) {
  
  is_success_ = value;
}
inline void ScheduleReply::set_is_success(bool value) {
  _internal_set_is_success(value);
  // @@protoc_insertion_point(field_set:capilot.ScheduleReply.is_success)
}

// string error_info = 2;
inline void ScheduleReply::clear_error_info() {
  error_info_.ClearToEmpty();
}
inline const std::string& ScheduleReply::error_info() const {
  // @@protoc_insertion_point(field_get:capilot.ScheduleReply.error_info)
  return _internal_error_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ScheduleReply::set_error_info(ArgT0&& arg0, ArgT... args) {
 
 error_info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:capilot.ScheduleReply.error_info)
}
inline std::string* ScheduleReply::mutable_error_info() {
  std::string* _s = _internal_mutable_error_info();
  // @@protoc_insertion_point(field_mutable:capilot.ScheduleReply.error_info)
  return _s;
}
inline const std::string& ScheduleReply::_internal_error_info() const {
  return error_info_.Get();
}
inline void ScheduleReply::_internal_set_error_info(const std::string& value) {
  
  error_info_.Set(value, GetArenaForAllocation());
}
inline std::string* ScheduleReply::_internal_mutable_error_info() {
  
  return error_info_.Mutable(GetArenaForAllocation());
}
inline std::string* ScheduleReply::release_error_info() {
  // @@protoc_insertion_point(field_release:capilot.ScheduleReply.error_info)
  return error_info_.Release();
}
inline void ScheduleReply::set_allocated_error_info(std::string* error_info) {
  if (error_info != nullptr) {
    
  } else {
    
  }
  error_info_.SetAllocated(error_info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_info_.IsDefault()) {
    error_info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:capilot.ScheduleReply.error_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace capilot

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_schedule_2eproto
