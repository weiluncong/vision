// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raw_data.proto

#include "raw_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace RawDataProto {
PROTOBUF_CONSTEXPR CanData_MetaCanFrame::CanData_MetaCanFrame(
    ::_pbi::ConstantInitialized)
  : candata_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , id_(0)
  , len_(0){}
struct CanData_MetaCanFrameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CanData_MetaCanFrameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CanData_MetaCanFrameDefaultTypeInternal() {}
  union {
    CanData_MetaCanFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CanData_MetaCanFrameDefaultTypeInternal _CanData_MetaCanFrame_default_instance_;
PROTOBUF_CONSTEXPR CanData::CanData(
    ::_pbi::ConstantInitialized)
  : canframe_()
  , channel_(0){}
struct CanDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CanDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CanDataDefaultTypeInternal() {}
  union {
    CanData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CanDataDefaultTypeInternal _CanData_default_instance_;
PROTOBUF_CONSTEXPR ImageData::ImageData(
    ::_pbi::ConstantInitialized)
  : image_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ImageDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageDataDefaultTypeInternal() {}
  union {
    ImageData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageDataDefaultTypeInternal _ImageData_default_instance_;
PROTOBUF_CONSTEXPR StructData::StructData(
    ::_pbi::ConstantInitialized)
  : bufdata_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct StructDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StructDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StructDataDefaultTypeInternal() {}
  union {
    StructData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StructDataDefaultTypeInternal _StructData_default_instance_;
PROTOBUF_CONSTEXPR RawData::RawData(
    ::_pbi::ConstantInitialized)
  : candata_(nullptr)
  , imagedata_(nullptr)
  , structdata_(nullptr)
  , timestamp_(0)
  , datasource_(0)
  , datatype_(0)
  , frameindex_(0){}
struct RawDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RawDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RawDataDefaultTypeInternal() {}
  union {
    RawData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RawDataDefaultTypeInternal _RawData_default_instance_;
}  // namespace RawDataProto
static ::_pb::Metadata file_level_metadata_raw_5fdata_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_raw_5fdata_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_raw_5fdata_2eproto = nullptr;

const uint32_t TableStruct_raw_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RawDataProto::CanData_MetaCanFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RawDataProto::CanData_MetaCanFrame, id_),
  PROTOBUF_FIELD_OFFSET(::RawDataProto::CanData_MetaCanFrame, len_),
  PROTOBUF_FIELD_OFFSET(::RawDataProto::CanData_MetaCanFrame, candata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RawDataProto::CanData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RawDataProto::CanData, channel_),
  PROTOBUF_FIELD_OFFSET(::RawDataProto::CanData, canframe_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RawDataProto::ImageData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RawDataProto::ImageData, image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RawDataProto::StructData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RawDataProto::StructData, bufdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RawDataProto::RawData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RawDataProto::RawData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::RawDataProto::RawData, datasource_),
  PROTOBUF_FIELD_OFFSET(::RawDataProto::RawData, datatype_),
  PROTOBUF_FIELD_OFFSET(::RawDataProto::RawData, candata_),
  PROTOBUF_FIELD_OFFSET(::RawDataProto::RawData, imagedata_),
  PROTOBUF_FIELD_OFFSET(::RawDataProto::RawData, structdata_),
  PROTOBUF_FIELD_OFFSET(::RawDataProto::RawData, frameindex_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::RawDataProto::CanData_MetaCanFrame)},
  { 9, -1, -1, sizeof(::RawDataProto::CanData)},
  { 17, -1, -1, sizeof(::RawDataProto::ImageData)},
  { 24, -1, -1, sizeof(::RawDataProto::StructData)},
  { 31, -1, -1, sizeof(::RawDataProto::RawData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::RawDataProto::_CanData_MetaCanFrame_default_instance_._instance,
  &::RawDataProto::_CanData_default_instance_._instance,
  &::RawDataProto::_ImageData_default_instance_._instance,
  &::RawDataProto::_StructData_default_instance_._instance,
  &::RawDataProto::_RawData_default_instance_._instance,
};

const char descriptor_table_protodef_raw_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016raw_data.proto\022\014RawDataProto\"\212\001\n\007CanDa"
  "ta\022\017\n\007channel\030\001 \001(\005\0224\n\010canFrame\030\002 \003(\0132\"."
  "RawDataProto.CanData.MetaCanFrame\0328\n\014Met"
  "aCanFrame\022\n\n\002id\030\001 \001(\005\022\013\n\003len\030\002 \001(\005\022\017\n\007ca"
  "ndata\030\003 \001(\014\"\032\n\tImageData\022\r\n\005image\030\001 \001(\014\""
  "\035\n\nStructData\022\017\n\007bufData\030\001 \001(\014\"\330\001\n\007RawDa"
  "ta\022\021\n\ttimestamp\030\001 \001(\001\022\022\n\ndataSource\030\002 \001("
  "\005\022\020\n\010dataType\030\003 \001(\005\022&\n\007candata\030\004 \001(\0132\025.R"
  "awDataProto.CanData\022*\n\timageData\030\005 \001(\0132\027"
  ".RawDataProto.ImageData\022,\n\nstructData\030\006 "
  "\001(\0132\030.RawDataProto.StructData\022\022\n\nframeIn"
  "dex\030\007 \001(\005b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_raw_5fdata_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_raw_5fdata_2eproto = {
    false, false, 457, descriptor_table_protodef_raw_5fdata_2eproto,
    "raw_data.proto",
    &descriptor_table_raw_5fdata_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_raw_5fdata_2eproto::offsets,
    file_level_metadata_raw_5fdata_2eproto, file_level_enum_descriptors_raw_5fdata_2eproto,
    file_level_service_descriptors_raw_5fdata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_raw_5fdata_2eproto_getter() {
  return &descriptor_table_raw_5fdata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_raw_5fdata_2eproto(&descriptor_table_raw_5fdata_2eproto);
namespace RawDataProto {

// ===================================================================

class CanData_MetaCanFrame::_Internal {
 public:
};

CanData_MetaCanFrame::CanData_MetaCanFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:RawDataProto.CanData.MetaCanFrame)
}
CanData_MetaCanFrame::CanData_MetaCanFrame(const CanData_MetaCanFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  candata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    candata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_candata().empty()) {
    candata_.Set(from._internal_candata(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&len_) -
    reinterpret_cast<char*>(&id_)) + sizeof(len_));
  // @@protoc_insertion_point(copy_constructor:RawDataProto.CanData.MetaCanFrame)
}

inline void CanData_MetaCanFrame::SharedCtor() {
candata_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  candata_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&len_) -
    reinterpret_cast<char*>(&id_)) + sizeof(len_));
}

CanData_MetaCanFrame::~CanData_MetaCanFrame() {
  // @@protoc_insertion_point(destructor:RawDataProto.CanData.MetaCanFrame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CanData_MetaCanFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  candata_.Destroy();
}

void CanData_MetaCanFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CanData_MetaCanFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:RawDataProto.CanData.MetaCanFrame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candata_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&len_) -
      reinterpret_cast<char*>(&id_)) + sizeof(len_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CanData_MetaCanFrame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 len = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes candata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_candata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CanData_MetaCanFrame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RawDataProto.CanData.MetaCanFrame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 len = 2;
  if (this->_internal_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_len(), target);
  }

  // bytes candata = 3;
  if (!this->_internal_candata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_candata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RawDataProto.CanData.MetaCanFrame)
  return target;
}

size_t CanData_MetaCanFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RawDataProto.CanData.MetaCanFrame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes candata = 3;
  if (!this->_internal_candata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_candata());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 len = 2;
  if (this->_internal_len() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_len());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CanData_MetaCanFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CanData_MetaCanFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CanData_MetaCanFrame::GetClassData() const { return &_class_data_; }

void CanData_MetaCanFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CanData_MetaCanFrame *>(to)->MergeFrom(
      static_cast<const CanData_MetaCanFrame &>(from));
}


void CanData_MetaCanFrame::MergeFrom(const CanData_MetaCanFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RawDataProto.CanData.MetaCanFrame)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_candata().empty()) {
    _internal_set_candata(from._internal_candata());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_len() != 0) {
    _internal_set_len(from._internal_len());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CanData_MetaCanFrame::CopyFrom(const CanData_MetaCanFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RawDataProto.CanData.MetaCanFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanData_MetaCanFrame::IsInitialized() const {
  return true;
}

void CanData_MetaCanFrame::InternalSwap(CanData_MetaCanFrame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &candata_, lhs_arena,
      &other->candata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CanData_MetaCanFrame, len_)
      + sizeof(CanData_MetaCanFrame::len_)
      - PROTOBUF_FIELD_OFFSET(CanData_MetaCanFrame, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CanData_MetaCanFrame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raw_5fdata_2eproto_getter, &descriptor_table_raw_5fdata_2eproto_once,
      file_level_metadata_raw_5fdata_2eproto[0]);
}

// ===================================================================

class CanData::_Internal {
 public:
};

CanData::CanData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  canframe_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:RawDataProto.CanData)
}
CanData::CanData(const CanData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      canframe_(from.canframe_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_ = from.channel_;
  // @@protoc_insertion_point(copy_constructor:RawDataProto.CanData)
}

inline void CanData::SharedCtor() {
channel_ = 0;
}

CanData::~CanData() {
  // @@protoc_insertion_point(destructor:RawDataProto.CanData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CanData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CanData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CanData::Clear() {
// @@protoc_insertion_point(message_clear_start:RawDataProto.CanData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  canframe_.Clear();
  channel_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CanData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .RawDataProto.CanData.MetaCanFrame canFrame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_canframe(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CanData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RawDataProto.CanData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 channel = 1;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_channel(), target);
  }

  // repeated .RawDataProto.CanData.MetaCanFrame canFrame = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_canframe_size()); i < n; i++) {
    const auto& repfield = this->_internal_canframe(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RawDataProto.CanData)
  return target;
}

size_t CanData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RawDataProto.CanData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RawDataProto.CanData.MetaCanFrame canFrame = 2;
  total_size += 1UL * this->_internal_canframe_size();
  for (const auto& msg : this->canframe_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 channel = 1;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CanData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CanData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CanData::GetClassData() const { return &_class_data_; }

void CanData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CanData *>(to)->MergeFrom(
      static_cast<const CanData &>(from));
}


void CanData::MergeFrom(const CanData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RawDataProto.CanData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  canframe_.MergeFrom(from.canframe_);
  if (from._internal_channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CanData::CopyFrom(const CanData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RawDataProto.CanData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanData::IsInitialized() const {
  return true;
}

void CanData::InternalSwap(CanData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  canframe_.InternalSwap(&other->canframe_);
  swap(channel_, other->channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CanData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raw_5fdata_2eproto_getter, &descriptor_table_raw_5fdata_2eproto_once,
      file_level_metadata_raw_5fdata_2eproto[1]);
}

// ===================================================================

class ImageData::_Internal {
 public:
};

ImageData::ImageData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:RawDataProto.ImageData)
}
ImageData::ImageData(const ImageData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image().empty()) {
    image_.Set(from._internal_image(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:RawDataProto.ImageData)
}

inline void ImageData::SharedCtor() {
image_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  image_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ImageData::~ImageData() {
  // @@protoc_insertion_point(destructor:RawDataProto.ImageData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImageData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  image_.Destroy();
}

void ImageData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImageData::Clear() {
// @@protoc_insertion_point(message_clear_start:RawDataProto.ImageData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_image();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RawDataProto.ImageData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes image = 1;
  if (!this->_internal_image().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_image(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RawDataProto.ImageData)
  return target;
}

size_t ImageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RawDataProto.ImageData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes image = 1;
  if (!this->_internal_image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_image());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ImageData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageData::GetClassData() const { return &_class_data_; }

void ImageData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ImageData *>(to)->MergeFrom(
      static_cast<const ImageData &>(from));
}


void ImageData::MergeFrom(const ImageData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RawDataProto.ImageData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_image().empty()) {
    _internal_set_image(from._internal_image());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageData::CopyFrom(const ImageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RawDataProto.ImageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageData::IsInitialized() const {
  return true;
}

void ImageData::InternalSwap(ImageData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &image_, lhs_arena,
      &other->image_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raw_5fdata_2eproto_getter, &descriptor_table_raw_5fdata_2eproto_once,
      file_level_metadata_raw_5fdata_2eproto[2]);
}

// ===================================================================

class StructData::_Internal {
 public:
};

StructData::StructData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:RawDataProto.StructData)
}
StructData::StructData(const StructData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bufdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bufdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bufdata().empty()) {
    bufdata_.Set(from._internal_bufdata(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:RawDataProto.StructData)
}

inline void StructData::SharedCtor() {
bufdata_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bufdata_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StructData::~StructData() {
  // @@protoc_insertion_point(destructor:RawDataProto.StructData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StructData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bufdata_.Destroy();
}

void StructData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StructData::Clear() {
// @@protoc_insertion_point(message_clear_start:RawDataProto.StructData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bufdata_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StructData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes bufData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bufdata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StructData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RawDataProto.StructData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes bufData = 1;
  if (!this->_internal_bufdata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_bufdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RawDataProto.StructData)
  return target;
}

size_t StructData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RawDataProto.StructData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes bufData = 1;
  if (!this->_internal_bufdata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bufdata());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StructData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StructData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StructData::GetClassData() const { return &_class_data_; }

void StructData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StructData *>(to)->MergeFrom(
      static_cast<const StructData &>(from));
}


void StructData::MergeFrom(const StructData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RawDataProto.StructData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bufdata().empty()) {
    _internal_set_bufdata(from._internal_bufdata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StructData::CopyFrom(const StructData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RawDataProto.StructData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructData::IsInitialized() const {
  return true;
}

void StructData::InternalSwap(StructData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &bufdata_, lhs_arena,
      &other->bufdata_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StructData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raw_5fdata_2eproto_getter, &descriptor_table_raw_5fdata_2eproto_once,
      file_level_metadata_raw_5fdata_2eproto[3]);
}

// ===================================================================

class RawData::_Internal {
 public:
  static const ::RawDataProto::CanData& candata(const RawData* msg);
  static const ::RawDataProto::ImageData& imagedata(const RawData* msg);
  static const ::RawDataProto::StructData& structdata(const RawData* msg);
};

const ::RawDataProto::CanData&
RawData::_Internal::candata(const RawData* msg) {
  return *msg->candata_;
}
const ::RawDataProto::ImageData&
RawData::_Internal::imagedata(const RawData* msg) {
  return *msg->imagedata_;
}
const ::RawDataProto::StructData&
RawData::_Internal::structdata(const RawData* msg) {
  return *msg->structdata_;
}
RawData::RawData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:RawDataProto.RawData)
}
RawData::RawData(const RawData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_candata()) {
    candata_ = new ::RawDataProto::CanData(*from.candata_);
  } else {
    candata_ = nullptr;
  }
  if (from._internal_has_imagedata()) {
    imagedata_ = new ::RawDataProto::ImageData(*from.imagedata_);
  } else {
    imagedata_ = nullptr;
  }
  if (from._internal_has_structdata()) {
    structdata_ = new ::RawDataProto::StructData(*from.structdata_);
  } else {
    structdata_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&frameindex_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(frameindex_));
  // @@protoc_insertion_point(copy_constructor:RawDataProto.RawData)
}

inline void RawData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&candata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&frameindex_) -
    reinterpret_cast<char*>(&candata_)) + sizeof(frameindex_));
}

RawData::~RawData() {
  // @@protoc_insertion_point(destructor:RawDataProto.RawData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RawData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete candata_;
  if (this != internal_default_instance()) delete imagedata_;
  if (this != internal_default_instance()) delete structdata_;
}

void RawData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RawData::Clear() {
// @@protoc_insertion_point(message_clear_start:RawDataProto.RawData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && candata_ != nullptr) {
    delete candata_;
  }
  candata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && imagedata_ != nullptr) {
    delete imagedata_;
  }
  imagedata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && structdata_ != nullptr) {
    delete structdata_;
  }
  structdata_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frameindex_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(frameindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 dataSource = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          datasource_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dataType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          datatype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .RawDataProto.CanData candata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_candata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .RawDataProto.ImageData imageData = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_imagedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .RawDataProto.StructData structData = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_structdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 frameIndex = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          frameindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RawData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RawDataProto.RawData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double timestamp = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestamp = this->_internal_timestamp();
  uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_timestamp(), target);
  }

  // int32 dataSource = 2;
  if (this->_internal_datasource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_datasource(), target);
  }

  // int32 dataType = 3;
  if (this->_internal_datatype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_datatype(), target);
  }

  // .RawDataProto.CanData candata = 4;
  if (this->_internal_has_candata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::candata(this),
        _Internal::candata(this).GetCachedSize(), target, stream);
  }

  // .RawDataProto.ImageData imageData = 5;
  if (this->_internal_has_imagedata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::imagedata(this),
        _Internal::imagedata(this).GetCachedSize(), target, stream);
  }

  // .RawDataProto.StructData structData = 6;
  if (this->_internal_has_structdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::structdata(this),
        _Internal::structdata(this).GetCachedSize(), target, stream);
  }

  // int32 frameIndex = 7;
  if (this->_internal_frameindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_frameindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RawDataProto.RawData)
  return target;
}

size_t RawData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RawDataProto.RawData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .RawDataProto.CanData candata = 4;
  if (this->_internal_has_candata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *candata_);
  }

  // .RawDataProto.ImageData imageData = 5;
  if (this->_internal_has_imagedata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *imagedata_);
  }

  // .RawDataProto.StructData structData = 6;
  if (this->_internal_has_structdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *structdata_);
  }

  // double timestamp = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestamp = this->_internal_timestamp();
  uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    total_size += 1 + 8;
  }

  // int32 dataSource = 2;
  if (this->_internal_datasource() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_datasource());
  }

  // int32 dataType = 3;
  if (this->_internal_datatype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_datatype());
  }

  // int32 frameIndex = 7;
  if (this->_internal_frameindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_frameindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RawData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RawData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RawData::GetClassData() const { return &_class_data_; }

void RawData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RawData *>(to)->MergeFrom(
      static_cast<const RawData &>(from));
}


void RawData::MergeFrom(const RawData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RawDataProto.RawData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_candata()) {
    _internal_mutable_candata()->::RawDataProto::CanData::MergeFrom(from._internal_candata());
  }
  if (from._internal_has_imagedata()) {
    _internal_mutable_imagedata()->::RawDataProto::ImageData::MergeFrom(from._internal_imagedata());
  }
  if (from._internal_has_structdata()) {
    _internal_mutable_structdata()->::RawDataProto::StructData::MergeFrom(from._internal_structdata());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestamp = from._internal_timestamp();
  uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_datasource() != 0) {
    _internal_set_datasource(from._internal_datasource());
  }
  if (from._internal_datatype() != 0) {
    _internal_set_datatype(from._internal_datatype());
  }
  if (from._internal_frameindex() != 0) {
    _internal_set_frameindex(from._internal_frameindex());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RawData::CopyFrom(const RawData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RawDataProto.RawData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawData::IsInitialized() const {
  return true;
}

void RawData::InternalSwap(RawData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RawData, frameindex_)
      + sizeof(RawData::frameindex_)
      - PROTOBUF_FIELD_OFFSET(RawData, candata_)>(
          reinterpret_cast<char*>(&candata_),
          reinterpret_cast<char*>(&other->candata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RawData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raw_5fdata_2eproto_getter, &descriptor_table_raw_5fdata_2eproto_once,
      file_level_metadata_raw_5fdata_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace RawDataProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RawDataProto::CanData_MetaCanFrame*
Arena::CreateMaybeMessage< ::RawDataProto::CanData_MetaCanFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RawDataProto::CanData_MetaCanFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::RawDataProto::CanData*
Arena::CreateMaybeMessage< ::RawDataProto::CanData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RawDataProto::CanData >(arena);
}
template<> PROTOBUF_NOINLINE ::RawDataProto::ImageData*
Arena::CreateMaybeMessage< ::RawDataProto::ImageData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RawDataProto::ImageData >(arena);
}
template<> PROTOBUF_NOINLINE ::RawDataProto::StructData*
Arena::CreateMaybeMessage< ::RawDataProto::StructData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RawDataProto::StructData >(arena);
}
template<> PROTOBUF_NOINLINE ::RawDataProto::RawData*
Arena::CreateMaybeMessage< ::RawDataProto::RawData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RawDataProto::RawData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
