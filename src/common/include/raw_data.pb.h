// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raw_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_raw_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_raw_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_raw_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_raw_5fdata_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raw_5fdata_2eproto;
namespace RawDataProto {
class CanData;
struct CanDataDefaultTypeInternal;
extern CanDataDefaultTypeInternal _CanData_default_instance_;
class CanData_MetaCanFrame;
struct CanData_MetaCanFrameDefaultTypeInternal;
extern CanData_MetaCanFrameDefaultTypeInternal _CanData_MetaCanFrame_default_instance_;
class ImageData;
struct ImageDataDefaultTypeInternal;
extern ImageDataDefaultTypeInternal _ImageData_default_instance_;
class RawData;
struct RawDataDefaultTypeInternal;
extern RawDataDefaultTypeInternal _RawData_default_instance_;
class StructData;
struct StructDataDefaultTypeInternal;
extern StructDataDefaultTypeInternal _StructData_default_instance_;
}  // namespace RawDataProto
PROTOBUF_NAMESPACE_OPEN
template<> ::RawDataProto::CanData* Arena::CreateMaybeMessage<::RawDataProto::CanData>(Arena*);
template<> ::RawDataProto::CanData_MetaCanFrame* Arena::CreateMaybeMessage<::RawDataProto::CanData_MetaCanFrame>(Arena*);
template<> ::RawDataProto::ImageData* Arena::CreateMaybeMessage<::RawDataProto::ImageData>(Arena*);
template<> ::RawDataProto::RawData* Arena::CreateMaybeMessage<::RawDataProto::RawData>(Arena*);
template<> ::RawDataProto::StructData* Arena::CreateMaybeMessage<::RawDataProto::StructData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace RawDataProto {

// ===================================================================

class CanData_MetaCanFrame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RawDataProto.CanData.MetaCanFrame) */ {
 public:
  inline CanData_MetaCanFrame() : CanData_MetaCanFrame(nullptr) {}
  ~CanData_MetaCanFrame() override;
  explicit PROTOBUF_CONSTEXPR CanData_MetaCanFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CanData_MetaCanFrame(const CanData_MetaCanFrame& from);
  CanData_MetaCanFrame(CanData_MetaCanFrame&& from) noexcept
    : CanData_MetaCanFrame() {
    *this = ::std::move(from);
  }

  inline CanData_MetaCanFrame& operator=(const CanData_MetaCanFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline CanData_MetaCanFrame& operator=(CanData_MetaCanFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CanData_MetaCanFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const CanData_MetaCanFrame* internal_default_instance() {
    return reinterpret_cast<const CanData_MetaCanFrame*>(
               &_CanData_MetaCanFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CanData_MetaCanFrame& a, CanData_MetaCanFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(CanData_MetaCanFrame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CanData_MetaCanFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CanData_MetaCanFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CanData_MetaCanFrame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CanData_MetaCanFrame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CanData_MetaCanFrame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CanData_MetaCanFrame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RawDataProto.CanData.MetaCanFrame";
  }
  protected:
  explicit CanData_MetaCanFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandataFieldNumber = 3,
    kIdFieldNumber = 1,
    kLenFieldNumber = 2,
  };
  // bytes candata = 3;
  void clear_candata();
  const std::string& candata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_candata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_candata();
  PROTOBUF_NODISCARD std::string* release_candata();
  void set_allocated_candata(std::string* candata);
  private:
  const std::string& _internal_candata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_candata(const std::string& value);
  std::string* _internal_mutable_candata();
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 len = 2;
  void clear_len();
  int32_t len() const;
  void set_len(int32_t value);
  private:
  int32_t _internal_len() const;
  void _internal_set_len(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:RawDataProto.CanData.MetaCanFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr candata_;
  int32_t id_;
  int32_t len_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raw_5fdata_2eproto;
};
// -------------------------------------------------------------------

class CanData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RawDataProto.CanData) */ {
 public:
  inline CanData() : CanData(nullptr) {}
  ~CanData() override;
  explicit PROTOBUF_CONSTEXPR CanData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CanData(const CanData& from);
  CanData(CanData&& from) noexcept
    : CanData() {
    *this = ::std::move(from);
  }

  inline CanData& operator=(const CanData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CanData& operator=(CanData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CanData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CanData* internal_default_instance() {
    return reinterpret_cast<const CanData*>(
               &_CanData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CanData& a, CanData& b) {
    a.Swap(&b);
  }
  inline void Swap(CanData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CanData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CanData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CanData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CanData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CanData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CanData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RawDataProto.CanData";
  }
  protected:
  explicit CanData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CanData_MetaCanFrame MetaCanFrame;

  // accessors -------------------------------------------------------

  enum : int {
    kCanFrameFieldNumber = 2,
    kChannelFieldNumber = 1,
  };
  // repeated .RawDataProto.CanData.MetaCanFrame canFrame = 2;
  int canframe_size() const;
  private:
  int _internal_canframe_size() const;
  public:
  void clear_canframe();
  ::RawDataProto::CanData_MetaCanFrame* mutable_canframe(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RawDataProto::CanData_MetaCanFrame >*
      mutable_canframe();
  private:
  const ::RawDataProto::CanData_MetaCanFrame& _internal_canframe(int index) const;
  ::RawDataProto::CanData_MetaCanFrame* _internal_add_canframe();
  public:
  const ::RawDataProto::CanData_MetaCanFrame& canframe(int index) const;
  ::RawDataProto::CanData_MetaCanFrame* add_canframe();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RawDataProto::CanData_MetaCanFrame >&
      canframe() const;

  // int32 channel = 1;
  void clear_channel();
  int32_t channel() const;
  void set_channel(int32_t value);
  private:
  int32_t _internal_channel() const;
  void _internal_set_channel(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:RawDataProto.CanData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RawDataProto::CanData_MetaCanFrame > canframe_;
  int32_t channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raw_5fdata_2eproto;
};
// -------------------------------------------------------------------

class ImageData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RawDataProto.ImageData) */ {
 public:
  inline ImageData() : ImageData(nullptr) {}
  ~ImageData() override;
  explicit PROTOBUF_CONSTEXPR ImageData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageData(const ImageData& from);
  ImageData(ImageData&& from) noexcept
    : ImageData() {
    *this = ::std::move(from);
  }

  inline ImageData& operator=(const ImageData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageData& operator=(ImageData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageData* internal_default_instance() {
    return reinterpret_cast<const ImageData*>(
               &_ImageData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ImageData& a, ImageData& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImageData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImageData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RawDataProto.ImageData";
  }
  protected:
  explicit ImageData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 1,
  };
  // bytes image = 1;
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_NODISCARD std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // @@protoc_insertion_point(class_scope:RawDataProto.ImageData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raw_5fdata_2eproto;
};
// -------------------------------------------------------------------

class StructData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RawDataProto.StructData) */ {
 public:
  inline StructData() : StructData(nullptr) {}
  ~StructData() override;
  explicit PROTOBUF_CONSTEXPR StructData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StructData(const StructData& from);
  StructData(StructData&& from) noexcept
    : StructData() {
    *this = ::std::move(from);
  }

  inline StructData& operator=(const StructData& from) {
    CopyFrom(from);
    return *this;
  }
  inline StructData& operator=(StructData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StructData& default_instance() {
    return *internal_default_instance();
  }
  static inline const StructData* internal_default_instance() {
    return reinterpret_cast<const StructData*>(
               &_StructData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StructData& a, StructData& b) {
    a.Swap(&b);
  }
  inline void Swap(StructData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StructData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StructData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StructData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StructData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StructData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StructData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RawDataProto.StructData";
  }
  protected:
  explicit StructData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufDataFieldNumber = 1,
  };
  // bytes bufData = 1;
  void clear_bufdata();
  const std::string& bufdata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bufdata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bufdata();
  PROTOBUF_NODISCARD std::string* release_bufdata();
  void set_allocated_bufdata(std::string* bufdata);
  private:
  const std::string& _internal_bufdata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bufdata(const std::string& value);
  std::string* _internal_mutable_bufdata();
  public:

  // @@protoc_insertion_point(class_scope:RawDataProto.StructData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bufdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raw_5fdata_2eproto;
};
// -------------------------------------------------------------------

class RawData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RawDataProto.RawData) */ {
 public:
  inline RawData() : RawData(nullptr) {}
  ~RawData() override;
  explicit PROTOBUF_CONSTEXPR RawData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RawData(const RawData& from);
  RawData(RawData&& from) noexcept
    : RawData() {
    *this = ::std::move(from);
  }

  inline RawData& operator=(const RawData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawData& operator=(RawData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RawData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RawData* internal_default_instance() {
    return reinterpret_cast<const RawData*>(
               &_RawData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RawData& a, RawData& b) {
    a.Swap(&b);
  }
  inline void Swap(RawData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RawData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RawData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RawData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RawData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RawData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RawDataProto.RawData";
  }
  protected:
  explicit RawData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandataFieldNumber = 4,
    kImageDataFieldNumber = 5,
    kStructDataFieldNumber = 6,
    kTimestampFieldNumber = 1,
    kDataSourceFieldNumber = 2,
    kDataTypeFieldNumber = 3,
    kFrameIndexFieldNumber = 7,
  };
  // .RawDataProto.CanData candata = 4;
  bool has_candata() const;
  private:
  bool _internal_has_candata() const;
  public:
  void clear_candata();
  const ::RawDataProto::CanData& candata() const;
  PROTOBUF_NODISCARD ::RawDataProto::CanData* release_candata();
  ::RawDataProto::CanData* mutable_candata();
  void set_allocated_candata(::RawDataProto::CanData* candata);
  private:
  const ::RawDataProto::CanData& _internal_candata() const;
  ::RawDataProto::CanData* _internal_mutable_candata();
  public:
  void unsafe_arena_set_allocated_candata(
      ::RawDataProto::CanData* candata);
  ::RawDataProto::CanData* unsafe_arena_release_candata();

  // .RawDataProto.ImageData imageData = 5;
  bool has_imagedata() const;
  private:
  bool _internal_has_imagedata() const;
  public:
  void clear_imagedata();
  const ::RawDataProto::ImageData& imagedata() const;
  PROTOBUF_NODISCARD ::RawDataProto::ImageData* release_imagedata();
  ::RawDataProto::ImageData* mutable_imagedata();
  void set_allocated_imagedata(::RawDataProto::ImageData* imagedata);
  private:
  const ::RawDataProto::ImageData& _internal_imagedata() const;
  ::RawDataProto::ImageData* _internal_mutable_imagedata();
  public:
  void unsafe_arena_set_allocated_imagedata(
      ::RawDataProto::ImageData* imagedata);
  ::RawDataProto::ImageData* unsafe_arena_release_imagedata();

  // .RawDataProto.StructData structData = 6;
  bool has_structdata() const;
  private:
  bool _internal_has_structdata() const;
  public:
  void clear_structdata();
  const ::RawDataProto::StructData& structdata() const;
  PROTOBUF_NODISCARD ::RawDataProto::StructData* release_structdata();
  ::RawDataProto::StructData* mutable_structdata();
  void set_allocated_structdata(::RawDataProto::StructData* structdata);
  private:
  const ::RawDataProto::StructData& _internal_structdata() const;
  ::RawDataProto::StructData* _internal_mutable_structdata();
  public:
  void unsafe_arena_set_allocated_structdata(
      ::RawDataProto::StructData* structdata);
  ::RawDataProto::StructData* unsafe_arena_release_structdata();

  // double timestamp = 1;
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // int32 dataSource = 2;
  void clear_datasource();
  int32_t datasource() const;
  void set_datasource(int32_t value);
  private:
  int32_t _internal_datasource() const;
  void _internal_set_datasource(int32_t value);
  public:

  // int32 dataType = 3;
  void clear_datatype();
  int32_t datatype() const;
  void set_datatype(int32_t value);
  private:
  int32_t _internal_datatype() const;
  void _internal_set_datatype(int32_t value);
  public:

  // int32 frameIndex = 7;
  void clear_frameindex();
  int32_t frameindex() const;
  void set_frameindex(int32_t value);
  private:
  int32_t _internal_frameindex() const;
  void _internal_set_frameindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:RawDataProto.RawData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::RawDataProto::CanData* candata_;
  ::RawDataProto::ImageData* imagedata_;
  ::RawDataProto::StructData* structdata_;
  double timestamp_;
  int32_t datasource_;
  int32_t datatype_;
  int32_t frameindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raw_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CanData_MetaCanFrame

// int32 id = 1;
inline void CanData_MetaCanFrame::clear_id() {
  id_ = 0;
}
inline int32_t CanData_MetaCanFrame::_internal_id() const {
  return id_;
}
inline int32_t CanData_MetaCanFrame::id() const {
  // @@protoc_insertion_point(field_get:RawDataProto.CanData.MetaCanFrame.id)
  return _internal_id();
}
inline void CanData_MetaCanFrame::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void CanData_MetaCanFrame::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:RawDataProto.CanData.MetaCanFrame.id)
}

// int32 len = 2;
inline void CanData_MetaCanFrame::clear_len() {
  len_ = 0;
}
inline int32_t CanData_MetaCanFrame::_internal_len() const {
  return len_;
}
inline int32_t CanData_MetaCanFrame::len() const {
  // @@protoc_insertion_point(field_get:RawDataProto.CanData.MetaCanFrame.len)
  return _internal_len();
}
inline void CanData_MetaCanFrame::_internal_set_len(int32_t value) {
  
  len_ = value;
}
inline void CanData_MetaCanFrame::set_len(int32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:RawDataProto.CanData.MetaCanFrame.len)
}

// bytes candata = 3;
inline void CanData_MetaCanFrame::clear_candata() {
  candata_.ClearToEmpty();
}
inline const std::string& CanData_MetaCanFrame::candata() const {
  // @@protoc_insertion_point(field_get:RawDataProto.CanData.MetaCanFrame.candata)
  return _internal_candata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CanData_MetaCanFrame::set_candata(ArgT0&& arg0, ArgT... args) {
 
 candata_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RawDataProto.CanData.MetaCanFrame.candata)
}
inline std::string* CanData_MetaCanFrame::mutable_candata() {
  std::string* _s = _internal_mutable_candata();
  // @@protoc_insertion_point(field_mutable:RawDataProto.CanData.MetaCanFrame.candata)
  return _s;
}
inline const std::string& CanData_MetaCanFrame::_internal_candata() const {
  return candata_.Get();
}
inline void CanData_MetaCanFrame::_internal_set_candata(const std::string& value) {
  
  candata_.Set(value, GetArenaForAllocation());
}
inline std::string* CanData_MetaCanFrame::_internal_mutable_candata() {
  
  return candata_.Mutable(GetArenaForAllocation());
}
inline std::string* CanData_MetaCanFrame::release_candata() {
  // @@protoc_insertion_point(field_release:RawDataProto.CanData.MetaCanFrame.candata)
  return candata_.Release();
}
inline void CanData_MetaCanFrame::set_allocated_candata(std::string* candata) {
  if (candata != nullptr) {
    
  } else {
    
  }
  candata_.SetAllocated(candata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (candata_.IsDefault()) {
    candata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RawDataProto.CanData.MetaCanFrame.candata)
}

// -------------------------------------------------------------------

// CanData

// int32 channel = 1;
inline void CanData::clear_channel() {
  channel_ = 0;
}
inline int32_t CanData::_internal_channel() const {
  return channel_;
}
inline int32_t CanData::channel() const {
  // @@protoc_insertion_point(field_get:RawDataProto.CanData.channel)
  return _internal_channel();
}
inline void CanData::_internal_set_channel(int32_t value) {
  
  channel_ = value;
}
inline void CanData::set_channel(int32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:RawDataProto.CanData.channel)
}

// repeated .RawDataProto.CanData.MetaCanFrame canFrame = 2;
inline int CanData::_internal_canframe_size() const {
  return canframe_.size();
}
inline int CanData::canframe_size() const {
  return _internal_canframe_size();
}
inline void CanData::clear_canframe() {
  canframe_.Clear();
}
inline ::RawDataProto::CanData_MetaCanFrame* CanData::mutable_canframe(int index) {
  // @@protoc_insertion_point(field_mutable:RawDataProto.CanData.canFrame)
  return canframe_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RawDataProto::CanData_MetaCanFrame >*
CanData::mutable_canframe() {
  // @@protoc_insertion_point(field_mutable_list:RawDataProto.CanData.canFrame)
  return &canframe_;
}
inline const ::RawDataProto::CanData_MetaCanFrame& CanData::_internal_canframe(int index) const {
  return canframe_.Get(index);
}
inline const ::RawDataProto::CanData_MetaCanFrame& CanData::canframe(int index) const {
  // @@protoc_insertion_point(field_get:RawDataProto.CanData.canFrame)
  return _internal_canframe(index);
}
inline ::RawDataProto::CanData_MetaCanFrame* CanData::_internal_add_canframe() {
  return canframe_.Add();
}
inline ::RawDataProto::CanData_MetaCanFrame* CanData::add_canframe() {
  ::RawDataProto::CanData_MetaCanFrame* _add = _internal_add_canframe();
  // @@protoc_insertion_point(field_add:RawDataProto.CanData.canFrame)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RawDataProto::CanData_MetaCanFrame >&
CanData::canframe() const {
  // @@protoc_insertion_point(field_list:RawDataProto.CanData.canFrame)
  return canframe_;
}

// -------------------------------------------------------------------

// ImageData

// bytes image = 1;
inline void ImageData::clear_image() {
  image_.ClearToEmpty();
}
inline const std::string& ImageData::image() const {
  // @@protoc_insertion_point(field_get:RawDataProto.ImageData.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImageData::set_image(ArgT0&& arg0, ArgT... args) {
 
 image_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RawDataProto.ImageData.image)
}
inline std::string* ImageData::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:RawDataProto.ImageData.image)
  return _s;
}
inline const std::string& ImageData::_internal_image() const {
  return image_.Get();
}
inline void ImageData::_internal_set_image(const std::string& value) {
  
  image_.Set(value, GetArenaForAllocation());
}
inline std::string* ImageData::_internal_mutable_image() {
  
  return image_.Mutable(GetArenaForAllocation());
}
inline std::string* ImageData::release_image() {
  // @@protoc_insertion_point(field_release:RawDataProto.ImageData.image)
  return image_.Release();
}
inline void ImageData::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(image, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image_.IsDefault()) {
    image_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RawDataProto.ImageData.image)
}

// -------------------------------------------------------------------

// StructData

// bytes bufData = 1;
inline void StructData::clear_bufdata() {
  bufdata_.ClearToEmpty();
}
inline const std::string& StructData::bufdata() const {
  // @@protoc_insertion_point(field_get:RawDataProto.StructData.bufData)
  return _internal_bufdata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StructData::set_bufdata(ArgT0&& arg0, ArgT... args) {
 
 bufdata_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RawDataProto.StructData.bufData)
}
inline std::string* StructData::mutable_bufdata() {
  std::string* _s = _internal_mutable_bufdata();
  // @@protoc_insertion_point(field_mutable:RawDataProto.StructData.bufData)
  return _s;
}
inline const std::string& StructData::_internal_bufdata() const {
  return bufdata_.Get();
}
inline void StructData::_internal_set_bufdata(const std::string& value) {
  
  bufdata_.Set(value, GetArenaForAllocation());
}
inline std::string* StructData::_internal_mutable_bufdata() {
  
  return bufdata_.Mutable(GetArenaForAllocation());
}
inline std::string* StructData::release_bufdata() {
  // @@protoc_insertion_point(field_release:RawDataProto.StructData.bufData)
  return bufdata_.Release();
}
inline void StructData::set_allocated_bufdata(std::string* bufdata) {
  if (bufdata != nullptr) {
    
  } else {
    
  }
  bufdata_.SetAllocated(bufdata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bufdata_.IsDefault()) {
    bufdata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RawDataProto.StructData.bufData)
}

// -------------------------------------------------------------------

// RawData

// double timestamp = 1;
inline void RawData::clear_timestamp() {
  timestamp_ = 0;
}
inline double RawData::_internal_timestamp() const {
  return timestamp_;
}
inline double RawData::timestamp() const {
  // @@protoc_insertion_point(field_get:RawDataProto.RawData.timestamp)
  return _internal_timestamp();
}
inline void RawData::_internal_set_timestamp(double value) {
  
  timestamp_ = value;
}
inline void RawData::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:RawDataProto.RawData.timestamp)
}

// int32 dataSource = 2;
inline void RawData::clear_datasource() {
  datasource_ = 0;
}
inline int32_t RawData::_internal_datasource() const {
  return datasource_;
}
inline int32_t RawData::datasource() const {
  // @@protoc_insertion_point(field_get:RawDataProto.RawData.dataSource)
  return _internal_datasource();
}
inline void RawData::_internal_set_datasource(int32_t value) {
  
  datasource_ = value;
}
inline void RawData::set_datasource(int32_t value) {
  _internal_set_datasource(value);
  // @@protoc_insertion_point(field_set:RawDataProto.RawData.dataSource)
}

// int32 dataType = 3;
inline void RawData::clear_datatype() {
  datatype_ = 0;
}
inline int32_t RawData::_internal_datatype() const {
  return datatype_;
}
inline int32_t RawData::datatype() const {
  // @@protoc_insertion_point(field_get:RawDataProto.RawData.dataType)
  return _internal_datatype();
}
inline void RawData::_internal_set_datatype(int32_t value) {
  
  datatype_ = value;
}
inline void RawData::set_datatype(int32_t value) {
  _internal_set_datatype(value);
  // @@protoc_insertion_point(field_set:RawDataProto.RawData.dataType)
}

// .RawDataProto.CanData candata = 4;
inline bool RawData::_internal_has_candata() const {
  return this != internal_default_instance() && candata_ != nullptr;
}
inline bool RawData::has_candata() const {
  return _internal_has_candata();
}
inline void RawData::clear_candata() {
  if (GetArenaForAllocation() == nullptr && candata_ != nullptr) {
    delete candata_;
  }
  candata_ = nullptr;
}
inline const ::RawDataProto::CanData& RawData::_internal_candata() const {
  const ::RawDataProto::CanData* p = candata_;
  return p != nullptr ? *p : reinterpret_cast<const ::RawDataProto::CanData&>(
      ::RawDataProto::_CanData_default_instance_);
}
inline const ::RawDataProto::CanData& RawData::candata() const {
  // @@protoc_insertion_point(field_get:RawDataProto.RawData.candata)
  return _internal_candata();
}
inline void RawData::unsafe_arena_set_allocated_candata(
    ::RawDataProto::CanData* candata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(candata_);
  }
  candata_ = candata;
  if (candata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RawDataProto.RawData.candata)
}
inline ::RawDataProto::CanData* RawData::release_candata() {
  
  ::RawDataProto::CanData* temp = candata_;
  candata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::RawDataProto::CanData* RawData::unsafe_arena_release_candata() {
  // @@protoc_insertion_point(field_release:RawDataProto.RawData.candata)
  
  ::RawDataProto::CanData* temp = candata_;
  candata_ = nullptr;
  return temp;
}
inline ::RawDataProto::CanData* RawData::_internal_mutable_candata() {
  
  if (candata_ == nullptr) {
    auto* p = CreateMaybeMessage<::RawDataProto::CanData>(GetArenaForAllocation());
    candata_ = p;
  }
  return candata_;
}
inline ::RawDataProto::CanData* RawData::mutable_candata() {
  ::RawDataProto::CanData* _msg = _internal_mutable_candata();
  // @@protoc_insertion_point(field_mutable:RawDataProto.RawData.candata)
  return _msg;
}
inline void RawData::set_allocated_candata(::RawDataProto::CanData* candata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete candata_;
  }
  if (candata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(candata);
    if (message_arena != submessage_arena) {
      candata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, candata, submessage_arena);
    }
    
  } else {
    
  }
  candata_ = candata;
  // @@protoc_insertion_point(field_set_allocated:RawDataProto.RawData.candata)
}

// .RawDataProto.ImageData imageData = 5;
inline bool RawData::_internal_has_imagedata() const {
  return this != internal_default_instance() && imagedata_ != nullptr;
}
inline bool RawData::has_imagedata() const {
  return _internal_has_imagedata();
}
inline void RawData::clear_imagedata() {
  if (GetArenaForAllocation() == nullptr && imagedata_ != nullptr) {
    delete imagedata_;
  }
  imagedata_ = nullptr;
}
inline const ::RawDataProto::ImageData& RawData::_internal_imagedata() const {
  const ::RawDataProto::ImageData* p = imagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::RawDataProto::ImageData&>(
      ::RawDataProto::_ImageData_default_instance_);
}
inline const ::RawDataProto::ImageData& RawData::imagedata() const {
  // @@protoc_insertion_point(field_get:RawDataProto.RawData.imageData)
  return _internal_imagedata();
}
inline void RawData::unsafe_arena_set_allocated_imagedata(
    ::RawDataProto::ImageData* imagedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(imagedata_);
  }
  imagedata_ = imagedata;
  if (imagedata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RawDataProto.RawData.imageData)
}
inline ::RawDataProto::ImageData* RawData::release_imagedata() {
  
  ::RawDataProto::ImageData* temp = imagedata_;
  imagedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::RawDataProto::ImageData* RawData::unsafe_arena_release_imagedata() {
  // @@protoc_insertion_point(field_release:RawDataProto.RawData.imageData)
  
  ::RawDataProto::ImageData* temp = imagedata_;
  imagedata_ = nullptr;
  return temp;
}
inline ::RawDataProto::ImageData* RawData::_internal_mutable_imagedata() {
  
  if (imagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::RawDataProto::ImageData>(GetArenaForAllocation());
    imagedata_ = p;
  }
  return imagedata_;
}
inline ::RawDataProto::ImageData* RawData::mutable_imagedata() {
  ::RawDataProto::ImageData* _msg = _internal_mutable_imagedata();
  // @@protoc_insertion_point(field_mutable:RawDataProto.RawData.imageData)
  return _msg;
}
inline void RawData::set_allocated_imagedata(::RawDataProto::ImageData* imagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete imagedata_;
  }
  if (imagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(imagedata);
    if (message_arena != submessage_arena) {
      imagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imagedata, submessage_arena);
    }
    
  } else {
    
  }
  imagedata_ = imagedata;
  // @@protoc_insertion_point(field_set_allocated:RawDataProto.RawData.imageData)
}

// .RawDataProto.StructData structData = 6;
inline bool RawData::_internal_has_structdata() const {
  return this != internal_default_instance() && structdata_ != nullptr;
}
inline bool RawData::has_structdata() const {
  return _internal_has_structdata();
}
inline void RawData::clear_structdata() {
  if (GetArenaForAllocation() == nullptr && structdata_ != nullptr) {
    delete structdata_;
  }
  structdata_ = nullptr;
}
inline const ::RawDataProto::StructData& RawData::_internal_structdata() const {
  const ::RawDataProto::StructData* p = structdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::RawDataProto::StructData&>(
      ::RawDataProto::_StructData_default_instance_);
}
inline const ::RawDataProto::StructData& RawData::structdata() const {
  // @@protoc_insertion_point(field_get:RawDataProto.RawData.structData)
  return _internal_structdata();
}
inline void RawData::unsafe_arena_set_allocated_structdata(
    ::RawDataProto::StructData* structdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(structdata_);
  }
  structdata_ = structdata;
  if (structdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RawDataProto.RawData.structData)
}
inline ::RawDataProto::StructData* RawData::release_structdata() {
  
  ::RawDataProto::StructData* temp = structdata_;
  structdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::RawDataProto::StructData* RawData::unsafe_arena_release_structdata() {
  // @@protoc_insertion_point(field_release:RawDataProto.RawData.structData)
  
  ::RawDataProto::StructData* temp = structdata_;
  structdata_ = nullptr;
  return temp;
}
inline ::RawDataProto::StructData* RawData::_internal_mutable_structdata() {
  
  if (structdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::RawDataProto::StructData>(GetArenaForAllocation());
    structdata_ = p;
  }
  return structdata_;
}
inline ::RawDataProto::StructData* RawData::mutable_structdata() {
  ::RawDataProto::StructData* _msg = _internal_mutable_structdata();
  // @@protoc_insertion_point(field_mutable:RawDataProto.RawData.structData)
  return _msg;
}
inline void RawData::set_allocated_structdata(::RawDataProto::StructData* structdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete structdata_;
  }
  if (structdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(structdata);
    if (message_arena != submessage_arena) {
      structdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, structdata, submessage_arena);
    }
    
  } else {
    
  }
  structdata_ = structdata;
  // @@protoc_insertion_point(field_set_allocated:RawDataProto.RawData.structData)
}

// int32 frameIndex = 7;
inline void RawData::clear_frameindex() {
  frameindex_ = 0;
}
inline int32_t RawData::_internal_frameindex() const {
  return frameindex_;
}
inline int32_t RawData::frameindex() const {
  // @@protoc_insertion_point(field_get:RawDataProto.RawData.frameIndex)
  return _internal_frameindex();
}
inline void RawData::_internal_set_frameindex(int32_t value) {
  
  frameindex_ = value;
}
inline void RawData::set_frameindex(int32_t value) {
  _internal_set_frameindex(value);
  // @@protoc_insertion_point(field_set:RawDataProto.RawData.frameIndex)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace RawDataProto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_raw_5fdata_2eproto
